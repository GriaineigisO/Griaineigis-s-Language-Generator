//@collapse
import {countNounArray, massNounArray, transitiveVerbArray, intransitiveVerbArray, adjectiveArray, conjunctionArray, adverbArray, adpositionArray, intensifierArray, countNounArrayPlural, generatedCountNouns, generatedMassNouns, generatedAdjectives, generatedTransitiveVerbs, generatedIntransitiveVerbs, generatedAdverbs, generatedConjunctions, generatedAdpositions, generatedIntensifiers, generateAffixes, typologyNum, markedSingularOrNot, singularAffix, numberSuffixOrPrefix, grammaticalNum, generalAffix, genderNum, animateAffix, inanimateAffix, animInanMass, divineNonDivineMass, humanAnimalInanMass, mascFemMass,  mascFemNeutMass, naturalArtificialMass, animacyClassifierMassArray, shapeClassifierMassArray, activePassiveMass, shortGenericClassifierMassArray, masculineAffix, feminineAffix, neuterAffix, humanAffix, animalAffix, inanimate2Affix, divineAffix, profaneAffix, activeAffix, passiveAffix, naturalAffix, artificialAffix, nominativeAffix, languageName} from './script.js';
import { spell } from './orthography.js';
import { soundChange, cloneArray} from './soundchange.js';
import {activePassive, animInan, divineNonDivine, humanAnimalInan, mascFemNeut, mascFem, naturalArtificial, animacyClassifierArray, shapeClassifierArray, shortGenericClassifierArray, derivedOrInheritedCountNoun, etymologyArrayCountNoun, etymologyCountNoun, possessorOfQualityCount,derivationListCountNoun} from './englishWordArrays/Nouns/countNouns.js'
import {derivedOrInheritedMassNoun, etymologyArrayMassNoun, etymologyMassNoun, possessorOfQualityMass, singulativeMassNounArray, pluralSingulativeMassNounArray} from './englishWordArrays/Nouns/massNouns.js'
import {derivedOrInheritedTransVerb, etymologyArrayTransVerb, etymologyTransVerb, transitiveVerb3SArray, transitiveVerbPastArray, derivationListTransVerb} from '/englishWordArrays/Verbs/englishTransitiveVerbs.js';
import {derivedOrInheritedIntransVerb, derivationListIntransVerb, etymologyArrayIntransVerb, etymologyIntransVerb} from '/englishWordArrays/Verbs/englishIntransitiveVerbs.js';
import { etymologyArrayADJ, derivedOrInheritedADJ, etymologyADJ, comparativeAdjectiveArray} from './englishWordArrays/Adjectives/englishAdjectives.js';
import {grammaticalNumber, caseNumber, animSgAffix, inanSgAffix, grammaticalNumber as grammaticalNumberFusional, mascSgAffix, femSgAffix} from './fusionalNouns.js';
import {smallQuantifiersArray, middingQuantifierArray, bigQuantifierArray, opinionQuantifierArray} from './englishWordArrays/quantifierArray.js';
import {derivedOrInheritedCONJ} from './englishWordArrays/conjunctions.js'
import {derivedOrInheritedADV} from './englishWordArrays/adverbs.js'
import {derivedOrInheritedINTENS} from './englishWordArrays/intensifier.js'
import {derivedOrInheritedQuantifier} from './englishWordArrays/quantifierArray.js'
import {derivedOrInheritedADPO} from './englishWordArrays/adpositions.js'
import {randomIndexOfArray} from './library.js'

let proneAffix = "";
let possessorAffix = "";
let possessorQualityAffix = "";
let bodyPartAffix = "";
let adjToCausativeVerbAffix = "";
let intransToTransVerbAffix = "";
let transVerbToABleAdjectiveAffix = "";

function clear() {
    proneAffix = "";
    possessorAffix = "";
    possessorQualityAffix = "";
    bodyPartAffix = "";
    adjToCausativeVerbAffix = "";
    intransToTransVerbAffix = "";
    transVerbToABleAdjectiveAffix = "";
    document.getElementById("derivational-affixes").replaceChildren();
    
};

function createAffixes() {
    proneAffix = generateAffixes();
    possessorAffix = generateAffixes();
    possessorQualityAffix = generateAffixes();
    bodyPartAffix = generateAffixes();
    adjToCausativeVerbAffix = generateAffixes();
    intransToTransVerbAffix  = generateAffixes();
    transVerbToABleAdjectiveAffix = generateAffixes();
};

function capitaliseLanguageName(str) {
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
};

function removeVFromVerb(verb) {
    let newArray = Array.from(verb);
    for (let i = 0; i < newArray.length; i++) {
        if (newArray[i] === "V") {
            newArray.splice(i, 1);
            let newVerb = newArray.join("");
            return newVerb;
        };
    };
    return verb;
};

//if the language requires an affix in the nominative, this function applies ther appropiate affix to the derived term
function addGrammaticalAffixes(word, partOfSpeech) {
        let inflectedWord = "";
        if(partOfSpeech === "noun") { 
                if(typologyNum === 1) {
                        if(grammaticalNum < 24 && markedSingularOrNot() && genderNum < 9) {
                        if(numberSuffixOrPrefix === "suffix") {
                                inflectedWord = word + singularAffix;
                        } else {
                                inflectedWord = singularAffix + word;
                        }
                        } if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 9) {
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animateAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + animateAffix + word;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimateAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + inanimateAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 9) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animateAffix;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = animateAffix + word;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimateAffix;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = inanimateAffix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animateAffix;
                                } else if(generatedMassNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = animateAffix + word;
                                } else if(generatedMassNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimateAffix;
                                } else if(generatedMassNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = inanimateAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 10) {
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + masculineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + feminineAffix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + masculineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + feminineAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 10) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = masculineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix;
                                } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = feminineAffix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = masculineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix;
                                } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = feminineAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 11) {
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + masculineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + feminineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + neuterAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + neuterAffix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + masculineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + feminineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + neuterAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + neuterAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 11) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = masculineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = feminineAffix + word;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + neuterAffix;
                                } else if(generatedCountNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = neuterAffix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + masculineAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "masculine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = masculineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + feminineAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "feminine2" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = feminineAffix + word;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + neuterAffix;
                                } else if(generatedMassNouns[i] === word && mascFemNeut[i] === "neuter" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = neuterAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 12) {
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + humanAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + humanAffix + word;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animalAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + animalAffix + word;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimate2Affix + singularAffix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + inanimate2Affix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + humanAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + humanAffix + word;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animalAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + animalAffix + word;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimate2Affix + singularAffix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + inanimate2Affix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 12) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + humanAffix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = humanAffix + word;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animalAffix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = animalAffix + word;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimate2Affix;
                                } else if(generatedCountNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = inanimate2Affix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + humanAffix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "human" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = humanAffix + word;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + animalAffix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "animal" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = animalAffix + word;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + inanimate2Affix;
                                } else if(generatedMassNouns[i] === word && humanAnimalInan[i] === "secondinanimate" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = inanimate2Affix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 13) {                                                                          
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + divineAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + divineAffix + word;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + profaneAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + profaneAffix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + divineAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + divineAffix + word;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + profaneAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + profaneAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 13) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + divineAffix;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = divineAffix + word;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + profaneAffix;
                                } else if(generatedCountNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = profaneAffix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + divineAffix;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "divine" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = divineAffix + word;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + profaneAffix;
                                } else if(generatedMassNouns[i] === word && divineNonDivine[i] === "profane" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = profaneAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 14) {                                                                          
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + activeAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + activeAffix + word;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + passiveAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + passiveAffix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + activeAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + activeAffix + word;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + passiveAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + passiveAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 14) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + activeAffix;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = activeAffix + word;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + passiveAffix;
                                } else if(generatedCountNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = passiveAffix + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + activeAffix;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "active" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = activeAffix + word;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + passiveAffix;
                                } else if(generatedMassNouns[i] === word && activePassive[i] === "passive" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = passiveAffix + word;
                                };
                        };
                        }  else if(grammaticalNum < 24 && markedSingularOrNot() && genderNum === 15) {                                                                          
                        for(let i = 0; i < countNounArray.length; i++) {
                                if(generatedCountNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + naturalAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + naturalAffix + word;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + artificialAffix + singularAffix;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + artificialAffix + word;
                                };
                        };
                        for(let i = 0; i < massNounArray.length; i++) {
                                if(generatedMassNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + naturalAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + naturalAffix + word;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + artificialAffix + singularAffix;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = singularAffix + artificialAffix + word;
                                };
                        };
                        } else if(grammaticalNum < 24 && markedSingularOrNot() === false && genderNum === 15) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + naturalAffix;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = naturalAffix + word;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + artificialAffix;
                                } else if(generatedCountNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = artificialAffix + word;
                                };
                        };

                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + naturalAffix;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "natural" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = naturalAffix + word;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + artificialAffix;
                                } else if(generatedMassNouns[i] === word && naturalArtificial[i] === "artificial" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = artificialAffix + word;
                                };
                        };
                        };
                } else if (typologyNum === 2) {
                        if(grammaticalNumberFusional < 24 && markedSingularOrNot() && genderNum < 9 && caseNumber === 0) {
                        if(numberSuffixOrPrefix === "suffix") {
                                inflectedWord = word + soundChange(singularAffix);
                        } else {
                                inflectedWord = soundChange(singularAffix) + word;
                        };
                        } else if(grammaticalNumberFusional < 24 && markedSingularOrNot() === false && genderNum < 9 && caseNumber === 0) {
                                inflectedWord = word;
                        };
                        if(grammaticalNumberFusional < 24 && genderNum < 9 && caseNumber > 0) {
                        if(numberSuffixOrPrefix === "suffix") {
                                inflectedWord = word + soundChange(nominativeAffix);
                        } else {
                                inflectedWord = soundChange(nominativeAffix) + word;
                        };
                        };
                        if(grammaticalNumberFusional < 24 && genderNum === 9 && caseNumber === 0) {
                        for(let i = 0; i < generatedCountNouns.length; i++) {
                                if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + soundChange(animSgAffix);
                                } else if(generatedCountNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = soundChange(animSgAffix) + word;
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + soundChange(inanSgAffix);
                                } else if(generatedCountNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = soundChange(inanSgAffix) + word;
                                };
                        };
                        for(let i = 0; i < generatedMassNouns.length; i++) {
                                if(generatedMassNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + soundChange(animSgAffix);
                                } else if(generatedMassNouns[i] === word && animInan[i] === "anim" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = soundChange(animSgAffix) + word;
                                } else if(generatedMassNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "suffix") {
                                        inflectedWord = word + soundChange(inanSgAffix);
                                } else if(generatedMassNouns[i] === word && animInan[i] === "inan" && numberSuffixOrPrefix === "prefix") {
                                        inflectedWord = soundChange(inanSgAffix) + word;
                                };
                        };
                        };
                        if(grammaticalNumberFusional < 24 && genderNum === 10 && caseNumber === 0) {
                                for(let i = 0; i < generatedCountNouns.length; i++) {
                                        if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                                inflectedWord = word + soundChange(mascSgAffix);
                                        } else if(generatedCountNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                                inflectedWord = soundChange(mascSgAffix) + word;
                                        } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                                inflectedWord = word + soundChange(femSgAffix);
                                        } else if(generatedCountNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                                inflectedWord = soundChange(femSgAffix) + word;
                                        };
                                };
                                for(let i = 0; i < generatedMassNouns.length; i++) {
                                        if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "suffix") {
                                                inflectedWord = word + soundChange(mascSgAffix);
                                        } else if(generatedMassNouns[i] === word && mascFem[i] === "masculine1" && numberSuffixOrPrefix === "prefix") {
                                                inflectedWord = soundChange(mascSgAffix) + word;
                                        } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "suffix") {
                                                inflectedWord = word + soundChange(femSgAffix);
                                        } else if(generatedMassNouns[i] === word && mascFem[i] === "feminine1" && numberSuffixOrPrefix === "prefix") {
                                                inflectedWord = soundChange(femSgAffix) + word;
                                        };
                                };
                        };
                /**add more here */     
                } else {
                        inflectedWord = word;
                };
        } else {
                inflectedWord = word;
        };
    return inflectedWord;
};

let randomNumberForDerivationSelection = 0;
function selectDerivationalAffixes() {
    let chosenDerivations = [NtoNPossessorOf];
    let potentialDerivations = [
        VtoADJprone,
        NtoNPossessorOf,
        NADJtoADJpossessorOfQuality,
        bodyParts,
        ADJtoCausVerb,
        intransToTransVerb,
        transVerbToABleAdjective
    ];
    
    //selects which derivational affixes will be chosen
    while(chosenDerivations.length < Math.floor(Math.random() * potentialDerivations.length) + 5) {
        randomNumberForDerivationSelection = Math.floor(Math.random() * potentialDerivations.length);
        if(chosenDerivations.includes(potentialDerivations[randomNumberForDerivationSelection]) === false) {
            chosenDerivations.push(potentialDerivations[randomNumberForDerivationSelection]) 
        };
    };

    //applies the chosen derivation to the word
    for(let i = 0; i < chosenDerivations.length; i++) {
        chosenDerivations[i]();
    };
    //console.log(chosenDerivations)
};

function VtoADJprone() {
    let li = document.createElement("li");
    let ul = document.createElement("ul");

    let derivedTerm = "";
    let olderDerivedTerm = "";
    let suffixOrPrefix = "";
    if(Math.floor(Math.random() * 2) === 0) {
        suffixOrPrefix = "suffix";
    } else {
        suffixOrPrefix = "prefix";
    };
    let exampleCounter = 0;
    for(let i = 0; i < transitiveVerbArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedTransitiveVerbs[i]) + soundChange(proneAffix);
                olderDerivedTerm = generatedTransitiveVerbs[i] + proneAffix;
                li.innerHTML = `<i>-${spell(soundChange("X" + proneAffix))}</i> "derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`
            } else {
                derivedTerm = soundChange(proneAffix) + soundChange(generatedTransitiveVerbs[i]);
                olderDerivedTerm = proneAffix + generatedTransitiveVerbs[i];
                li.innerHTML = `<i>${spell(soundChange(proneAffix + "A"))}-</i> "derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`
            };
            //decides if term is derived in modern language or old language
            let derivedInModernOrOld = "";
            if(Math.floor(Math.random() * 3) === 1) {
                derivedInModernOrOld = "old";
            } else {
                derivedInModernOrOld = "modern";
            };

            function deriveTransVtoADJprone(originalWord, derivedWord, comparative) {
                if(typeof derivedWord !== "string") {
                        let derivedWordArray = cloneArray(derivedWord);
                        derivedWord = randomIndexOfArray(derivedWord);
                        comparative = comparative[derivedWordArray.indexOf(derivedWord)];
                };
                let trueOrFalse = "";
                if(typeof originalWord !== "string" && originalWord.includes(transitiveVerbArray[i])) {
                        trueOrFalse = true;
                } else if (transitiveVerbArray[i] === originalWord){
                        trueOrFalse = true;
                };
                if(trueOrFalse) {
                        let meaning = derivedWord;
                        if(adjectiveArray.includes(meaning)) {
                                if(derivedInModernOrOld === "old") {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = olderDerivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "inheritedOldDerived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>)&nbsp+&nbsp<i>-${spell("X" + proneAffix)}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(proneAffix + "A")}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>)`;
                                        };
                                } else {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange("X" + proneAffix))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(proneAffix + "A"))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                }
                                etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                //lists the derived word, so it can be displayed in the dictionary entry of the original word
                                if(derivationListTransVerb[i] === "") {
	                                derivationListTransVerb[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`
                                } else {
	                                derivationListTransVerb[i] = derivationListTransVerb[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`;
                                };
                        } else {
                                adjectiveArray.push(meaning);
                                comparativeAdjectiveArray.push(comparative)
                                if(derivedInModernOrOld === "old") {
                                        generatedAdjectives.push(soundChange(olderDerivedTerm));
                                        derivedOrInheritedADJ.push("inheritedOldDerived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>)&nbsp+&nbsp<i>-${spell("X" + proneAffix)}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(proneAffix + "A")}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>)`;
                                        };
                                } else {
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange("X" + proneAffix))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`)
                                        } else {
                                                etymologyADJ.push(`<i>${spell(soundChange(proneAffix + "A"))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                                        };
                                }
                                etymologyArrayADJ.push(transitiveVerbArray[i]);
                                //lists the derived word, so it can be displayed in the dictionary entry of the original word
                                if(derivationListTransVerb[i] === "") {
	                                derivationListTransVerb[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`
                                } else {
	                                derivationListTransVerb[i] = derivationListTransVerb[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`;
                                };
                        if(exampleCounter < 6 && derivedInModernOrOld === "modern") {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                ul.appendChild(exampleLi);
                                exampleCounter++;
                        };
                         
                };
            };
            };

            deriveTransVtoADJprone("accept", "accepting", "more&nbspaccepting");
            deriveTransVtoADJprone("arrange", "methodical", "more&nbspmethodical");
            deriveTransVtoADJprone("blame", "accusatory", "more&nbspaccusatory");
            deriveTransVtoADJprone("blowV", "windy", "windier");
            deriveTransVtoADJprone("choose", "selective", "more&nbspselective");
            deriveTransVtoADJprone("compel", "compelling", "more&nbspcompelling");
            deriveTransVtoADJprone("fight", "aggressive", "more&nbspaggressive");
            deriveTransVtoADJprone("follow", "loyal", "more&nbsployal");
            deriveTransVtoADJprone("forget", "forgetful", "more&nbspforgetful");
            deriveTransVtoADJprone("give", "generous", "more&nbspgenerous");
            deriveTransVtoADJprone("honourV", "honourable", "more&nbsphonourable");
            deriveTransVtoADJprone("hunt", "predatory", "more&nbsppredatory");
            deriveTransVtoADJprone("instruct", "instructive", "more&nbspinstructive");
            deriveTransVtoADJprone("insult", ["mean", "rude", "offensive", "unkind", "nasty"], ["meaner", "ruder", "more&nbspoffensive", "more&nbspunkind", "nastier"]);
            deriveTransVtoADJprone("know", ["wise", "smart", "intelligent", "clever"], ["wiser", "smarter", "more&nbspintelligent", "more&nbspclever"]);
            deriveTransVtoADJprone("lack", ["empty", "insufficient", "devoid", "bereft", "lacking"], ["emptier", "more&nbspinsufficient", "more&nbspdevoid", "more&nbspbereft", "more&nbsplacking"]);
            deriveTransVtoADJprone("learn", ["studious", "erudite", "smart", "knowledgeable", "well-versed"], ["more&nbspstudious", "more&nbsperudite", "smarter", "more&nbspknowledgeable", "more&nbspwell-versed"]);
            deriveTransVtoADJprone("leave", ["absent", "gone", "away"], ["more&nbspabsent", "more&nbspgone", "more&nbspaway"]);
            deriveTransVtoADJprone("loveV", ["loving", "affectionate", "caring", "doting"], ["more&nbsploving", "more&nbspaffectionate", "more&nbspcaring", "more&nbspdoting"]);
            deriveTransVtoADJprone("make", ["creative", "industrious"], ["more&nbspcreative", "more&nbspindustrious"]);
            deriveTransVtoADJprone("marry", ["wed", "betrothed"], ["X", "X"]);
            deriveTransVtoADJprone("need", "in&nbspneed", "more&nbspin&nbspneed");
            deriveTransVtoADJprone("praise", ["exalting", "complementive"], ["more&nbspexalting", "more&nbspcomplementive"]);
            deriveTransVtoADJprone("perceive", ["perceptive", "alert", "watchful"], ["more&nbspperceptive", "more&nbspalert", "more&nbspwatchful"]);
            deriveTransVtoADJprone("persuade", "persuasive", "more&nbsppersuasive");
            deriveTransVtoADJprone("please", ["pleasing", "delightful", "likeable", "pleasant"], ["more&nbsppleasing", "more&nbspdelightful", "more&nbsplikeable", "more&nbsppleasant"]);
            deriveTransVtoADJprone("prefer", "biased", "more&nbspbiased");
            deriveTransVtoADJprone(["protect", "defend"], ["protective", "defensive"], ["more&nbspprotective", "more&nbspdefensive"]);
            deriveTransVtoADJprone("pull", ["addictive", "entrapping", "influential", "interesting", "fascinating"], ["more&nbspaddictive", "more&nbspentrapping", "more&nbspinfluential", "more&nbspinteresting", "more&nbspfascinating"]);
            deriveTransVtoADJprone("push", ["impelling", "booming", "dynamic", "impulsive"], ["more&nbspimpelling", "more&nbspbooming", "more&nbspdynamic", "more&nbspimpulsive"]);
            deriveTransVtoADJprone("put", ["in&nbspcharge", "authorative"], ["more&nbspin&nbspcharge", "more&nbspauthorative"]);
            deriveTransVtoADJprone("read", ["literate", "studious", "erudite"], ["more&nbspliterate", "more&nbspstudious", "more&nbsperudite"]);
            deriveTransVtoADJprone("refresh", ["refreshing", "invigorating"], ["more&nbsprefreshing", "more&nbspinvigorating"]);
            deriveTransVtoADJprone("remember", ["having&nbspa&nbspgood&nbspmemory", "reminiscing", "recollective", "pensive"], ["more&nbsphaving&nbspa&nbspgood&nbspmemory", "more&nbspreminiscing", "more&nbsprecollective", "more&nbsppensive"]);
            deriveTransVtoADJprone("respect", ["respectful", "polite", "well-mannered"], ["more&nbsprespectful", "more&nbsppolite", "more&nbspwell-mannered"]);
            deriveTransVtoADJprone("revel", ["jovial", "entertained", "happy", "cheerful", "playful", "rowdy", "jolly"], ["more&nbspjovial", "more&nbspentertained", "happier", "more&nbspcheerful", "more&nbspplayful", "rowdier", "jollier"]);
            deriveTransVtoADJprone("reward", ["rewarding", "worthwhile"], ["more&nbsprewarding", "more&nbspworthwhile"]);
            deriveTransVtoADJprone("roast", ["hot", "piping-hot", "scalding"], ["hotter", "more&nbsppiping-hot", "more&nbspscalding"]);
            deriveTransVtoADJprone("run", ["fast", "quick", "swift"], ["faster", "quicker", "swifter"]);
            deriveTransVtoADJprone("say", ["vocal", "loud", "long-winded"], ["more&nbspvocal", "louder", "more&nbsplong-winded"]);
            deriveTransVtoADJprone("see", ["watchful", "observant"], ["more&nbspwatchful", "more&nbspobservant"]);
            deriveTransVtoADJprone("scratch", ["sharp", "rough", "abrasive"], ["sharper", "rougher", "more&nbspabrasive"]);
            deriveTransVtoADJprone("sell", "merchantile", "more&nbspmerchantile");
            deriveTransVtoADJprone("separate", ["divisive", "intrusive", "interruptive"], ["more&nbspdivisive", "more&nbspintrusive", "more&nbspinterruptive"]);
            deriveTransVtoADJprone("shame", ["shameful", "disgraceful", "pathetic", "degenerate"], ["more&nbspshameful", "more&nbspdisgraceful", "more&nbsppathetic", "more&nbspdegenerate"]);
            deriveTransVtoADJprone("show", ["explanatory", "instructive", "helpful"], ["more&nbspexplanatory", "more&nbspinstructive", "more&nbsphelpful"]);
            deriveTransVtoADJprone("sing", "musical", "more&nbspmusical");
            deriveTransVtoADJprone("smash", "angry", "angrier");
            deriveTransVtoADJprone("split", ["divisive", "polarising"], ["more&nbspdivisive", "more&nbsppolarising"]);
            deriveTransVtoADJprone("sprout", ["sprouting", "young"], ["more&nbspsprouting", "younger"]);
            deriveTransVtoADJprone(["stab", "kill", "murder", "slaughter"], ["murderous", "piercing", "slaughterous", "homicidal", "blood-thirsty"], ["more&nbspmurderous", "more&nbsppiercing", "more&nbspslaughterous", "more&nbsphomicidal", "more&nbspblood-thirsty"]);
            deriveTransVtoADJprone("steal", "theftuous", "more&nbsptheftuous");
            deriveTransVtoADJprone("stick", ["sticky", "adherent"], ["stickier", "more&nbspadherent"]);
            deriveTransVtoADJprone("strikeV", ["aggressive", "threatening", "harmful", "dangerous"], ["more&nbspaggressive", "more&nbspthreatening", "more&nbspharmful", "more&nbspdangerous"]);
            deriveTransVtoADJprone("support", "supportive", "more&nbspsupportive");
            deriveTransVtoADJprone("surpass", ["excellent", "incredible", "amazing", "superior"], ["more&nbspexcellent", "more&nbspincredible", "more&nbspamazing", "more&nbspsuperior"]);
            deriveTransVtoADJprone("suit", "suitable", "suitable");
            deriveTransVtoADJprone("take", ["greedy", "interesting", "captivating", "receptive"], ["greedier", "more&nbspinteresting", "more&nbspcaptivating", "more&nbspreceptive"]);
            deriveTransVtoADJprone("teach", "educational", "more&nbspeducational");
            deriveTransVtoADJprone("thank", ["grateful", "thankful"], ["more&nbspgrateful", "more&nbspthankful"]);
            deriveTransVtoADJprone("use", "manipulative", "more&nbspgmanipulative");
            deriveTransVtoADJprone("want", ["jealous", "covetous", "envious", "lacking"], ["more&nbspjealous", "more&nbspcovetous", "more&nbspenvious", "more&nbsplacking"]);
            deriveTransVtoADJprone("wash", ["clean", "hygenic"], ["cleaner", "more&nbsphygenic"]);
            deriveTransVtoADJprone("write", ["earned", "educated"], ["more&nbspearned", "more&nbspeducated"]);
            deriveTransVtoADJprone("invite", ["inviting", "hospitable"], ["more&nbspinviting", "more&nbsphospitable"]);
            deriveTransVtoADJprone("leap", ["bouncy", "energetic", "dynamic"], ["bouncier", "more&nbspienergetic", "more&nbspidynamic"]);
        };
    };

    for(let i = 0; i < intransitiveVerbArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedIntransitiveVerbs[i]) + soundChange(proneAffix);
                olderDerivedTerm = generatedIntransitiveVerbs[i] + proneAffix;
            } else {
                derivedTerm = soundChange(proneAffix) + soundChange(generatedIntransitiveVerbs[i]);
                olderDerivedTerm = proneAffix + generatedIntransitiveVerbs[i];
            };
            //decides if term is derived in modern language or old language
            let derivedInModernOrOld = "";
            if(Math.floor(Math.random() * 3) === 1) {
                derivedInModernOrOld = "old";
            } else {
                derivedInModernOrOld = "modern";
            };

            function deriveIntransVtoADJprone(originalWord, derivedWord, comparative) {
                if(typeof derivedWord !== "string") {
                        let derivedWordArray = cloneArray(derivedWord);
                        derivedWord = randomIndexOfArray(derivedWord);
                        comparative = comparative[derivedWordArray.indexOf(derivedWord)];
                };
                let trueOrFalse = "";
                if(typeof originalWord !== "string" && originalWord.includes(intransitiveVerbArray[i])) {
                        trueOrFalse = true;
                } else if (intransitiveVerbArray[i] === originalWord){
                        trueOrFalse = true;
                };
                if(trueOrFalse) {
                        let meaning = derivedWord;
                        if(adjectiveArray.includes(meaning)) {
                                if(derivedInModernOrOld === "old") {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = olderDerivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "inheritedOldDerived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>)&nbsp+&nbsp<i>-${spell("X" + proneAffix)}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(proneAffix + "A")}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>)`;
                                        };
                                } else {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange("X" + proneAffix))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(proneAffix + "A"))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                                        };
                                }
                                etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                if(derivationListIntransVerb[i] === "") {
	                                derivationListIntransVerb[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`
                                } else {
	                                derivationListIntransVerb[i] = derivationListIntransVerb[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`;
                                };
                        } else {
                                adjectiveArray.push(meaning);
                                comparativeAdjectiveArray.push(comparative)
                                if(derivedInModernOrOld === "old") {
                                        generatedAdjectives.push(soundChange(olderDerivedTerm));
                                        derivedOrInheritedADJ.push("inheritedOldDerived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>)&nbsp+&nbsp<i>-${spell("X" + proneAffix)}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(olderDerivedTerm)}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(proneAffix + "A")}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>)`;
                                        };
                                } else {
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange("X" + proneAffix))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"`)
                                        } else {
                                                etymologyADJ.push(`<i>${spell(soundChange(proneAffix + "A"))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspverbs&nbspdescribing&nbspthe&nbspstate&nbspof&nbspthe&nbspagent&nbspof&nbspthe&nbspaction"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                                        };
                                }
                                etymologyArrayADJ.push(intransitiveVerbArray[i]);
                                if(derivationListIntransVerb[i] === "") {
	                                derivationListIntransVerb[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`
                                } else {
	                                derivationListIntransVerb[i] = derivationListIntransVerb[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm))}</i></strong>&nbsp"${meaning}"`;
                                };
                        };
                        if(exampleCounter < 6 && derivedInModernOrOld === "modern") {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                ul.appendChild(exampleLi);
                                exampleCounter++;
                        };
                         
                };
            };

            deriveIntransVtoADJprone("aim", ["precise", "accurate"], ["more&nbspprecise", "more&nbspaccurate"]);
            deriveIntransVtoADJprone("appear", ["visible", "obvious", "apparent"], ["more&nbspvisible", "more&nbspobvious", "more&nbspapparent"]);
            deriveIntransVtoADJprone("ask", ["curious", "inquisitive"], ["more&nbspcurious", "more&nbspinquisitive"]);
            deriveIntransVtoADJprone("babble", ["illegible", "annoying", "nonsensical"], ["more&nbspillegible", "more&nbspannoying", "more&nbspnonsensical"]);
            deriveIntransVtoADJprone("bloom", ["blooming", "blossoming", "lush"], ["more&nbspblooming", "more&nbspblossoming", "lusher"]);
            deriveIntransVtoADJprone("come", ["coming", "near", "next",  "close&nbspby", "adjacent"], ["X", "nearer", "X",  "closer&nbspby", "adjacent"]);
            deriveIntransVtoADJprone("complain", ["annoyed", "irritated", "displeased"], ["more&nbspannoyed", "more&nbspirritated", "more&nbspdispleased"]);
            deriveIntransVtoADJprone("die", ["dead", "mortal"], ["deader", "more&nbspmortal"]);
            deriveIntransVtoADJprone("fail", ["wrong", "incorrect"], ["more&nbspwrong", "more&nbspincorrect"]);
            deriveIntransVtoADJprone("float", ["light", "lofty"], ["lighter", "loftier"]);
            deriveIntransVtoADJprone(["glow", "shine"], "bright", "brighter");
            deriveIntransVtoADJprone(["go", "move"], ["dynamic", "moving", "alive"], ["more&nbspdynamic", "more&nbspmoving", "more&nbspalive"]);
            deriveIntransVtoADJprone("grieve", ["grieving", "mourning"], ["more&nbspgrieving", "more&nbspmourning"]);
            deriveIntransVtoADJprone("lament", ["sad", "woeful", "in&nbspdespair"], ["sadder", "more&nbspwoeful", "more&nbspin&nbspdespair"]);
            deriveIntransVtoADJprone("live", "alive", "more&nbspalive");
            deriveIntransVtoADJprone("laughable", ["cheerful", "hysterical"], ["more&nbspcheerful", "more&nbsphysterical"]);
            deriveIntransVtoADJprone("nod", ["suggestive", "similar"], ["more&nbspsuggestive", "more&nbspsimilar"]);
            deriveIntransVtoADJprone("perish", "mortal", "more&nbspmortal");
            deriveIntransVtoADJprone("play", "playful", "more&nbspplayful");
            deriveIntransVtoADJprone("pray", ["pious", "religious", "devout"], ["more&nbsppious", "more&nbspreligious", "more&nbspdevout"]);
            deriveIntransVtoADJprone("realise", ["alert", "aware", "suspicious"], ["more&nbspalert", "more&nbspaware", "more&nbspsuspicious"]);
            deriveIntransVtoADJprone("reckon", ["pensive", "accountable", "calculating"], ["more&nbsppensive", "more&nbspaccountable", "more&nbspcalculating"]);
            deriveIntransVtoADJprone("rejoice", ["happy", "cheerful", "jolly", "blissful"], ["happier", "more&nbspcheerful", "jollier", "more&nbspblissful"]);
            deriveIntransVtoADJprone("rest", "rested","more&nbsprested");
            deriveIntransVtoADJprone("rot", ["decayed", "rotten"], ["more&nbspdecayed", "more&nbsprotten"]);
            deriveIntransVtoADJprone("rush", "hurried", "more&nbsphurried");
            deriveIntransVtoADJprone("shit", ["foul", "defiling", "corrupting"], ["fouler", "more&nbspdefiling", "more&nbspcorrupting"]);
            deriveIntransVtoADJprone("sleep", "sleepy", "sleepier");
            deriveIntransVtoADJprone("sneak", ["sneaky", "stealthy"], ["sneakier", "stealthier"]);
            deriveIntransVtoADJprone("stand", ["upright", "attentive", "erect"], ["more&nbspupright", "more&nbspattentive", "more&nbsperect"]);
            deriveIntransVtoADJprone("stink", ["smelly", "stinky", "foul", "gross", "disgusting"], ["smellier", "stinkier", "fouler", "grosser", "more&nbspdisgusting"]);
            deriveIntransVtoADJprone("suffer", ["suffering", "in&nbsppain", "tormented"], ["more&nbspsuffering", "more&nbspin&nbsppain", "more&nbsptormented"]);
            deriveIntransVtoADJprone("sweatV", ["sweaty", "physically&nbsptired", "exhausted"], ["sweatier", "more&nbspphysically&nbsptired", "more&nbspexhausted"]);
            deriveIntransVtoADJprone("suggest", "suggestive", "more&nbspsuggestive");
            deriveIntransVtoADJprone("think", ["thoughtful", "pensive"], ["more&nbspthoughtful", "more&nbsppensive"]);
            deriveIntransVtoADJprone("tremble", ["trembling", "scared", "cowardly", "afraid"], ["more&nbsptrembling", "more&nbspscared", "more&nbspcowardly", "more&nbspafraid"]);
            deriveIntransVtoADJprone("understand", "understanding", "more&nbspunderstanding");
            deriveIntransVtoADJprone("adventure", "adventurous", "more&nbspadventurous");
            deriveIntransVtoADJprone("wake", "awake", "more&nbspawake");
            deriveIntransVtoADJprone("weep", ["sad", "crying", "weeping"], ["sadder", "X", "X"]);
            deriveIntransVtoADJprone("wish", "wishful", "more&nbspwishful");
            deriveIntransVtoADJprone("workV", ["industrious", "useful", "hard-working"], ["more&nbspindustrious", "more&nbspuseful", "more&nbsphard-working"]);
            deriveIntransVtoADJprone("yawn", ["sleepy", "inattentive", "bored"], ["sleepier", "more&nbspinattentive", "more&nbspbored"]);
        };
    };
    document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
};

function NtoNPossessorOf() {
    let li = document.createElement("li");
    let ul = document.createElement("ul");

    let derivedTerm = "";
    let olderDerivedTerm = "";
    let suffixOrPrefix = "";
    if(Math.floor(Math.random() * 2) === 0) {
        suffixOrPrefix = "suffix";
    } else {
        suffixOrPrefix = "prefix";
    };
    let exampleCounter = 0;
    //count noun to count noun
    for(let i = 0; i < countNounArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedCountNouns[i]) + soundChange(possessorAffix);
                olderDerivedTerm = generatedCountNouns[i] + possessorAffix;
                li.innerHTML = `<i>-${spell(soundChange("X" + possessorAffix))}</i> "possessor&nbspof"`
            } else {
                derivedTerm = soundChange(possessorAffix) + soundChange(generatedCountNouns[i]);
                olderDerivedTerm = possessorAffix + generatedCountNouns[i];
                li.innerHTML = `<i>${spell(soundChange(possessorAffix + "A"))}-</i> "possessor&nbspof"`
            };
            //decides if term is derived in modern language or old language
            let derivedInModernOrOld = "";
            if(Math.floor(Math.random() * 3) === 1) {
                derivedInModernOrOld = "old";
            } else {
                derivedInModernOrOld = "modern";
            };

            function deriveCountNtoCountNPossessorOf(originalWord, meaning, plural, activePass, animateInimate, divineProfane, humanAnimal, masculineFeminineNeuter, masculineFeminine, naturalArt, animacy, shape, shortGeneric) {
                if(countNounArray[i] === originalWord) {
                        if(countNounArray.includes(meaning)) {
                                if(derivedInModernOrOld === "old") {
                                        generatedCountNouns[countNounArray.indexOf(meaning)] = olderDerivedTerm;
                                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "inheritedOldDerived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(addGrammaticalAffixes(olderDerivedTerm, "noun"))}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedCountNouns[i], "noun"))}</i>&nbsp"${countNounArray[i]}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>)&nbsp+&nbsp<i>-${spell("X" + possessorAffix)}</i>&nbsp"possessor&nbspof"`;
                                        } else {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(addGrammaticalAffixes(olderDerivedTerm))}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(possessorAffix + "A")}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun"))}</i>&nbsp"${countNounArray[i]}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>)`;
                                        };
                                } else {
                                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange("X" + possessorAffix))}</i>&nbsp"possessor&nbspof"`;
                                        } else {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix + "A"))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                                        };
                                        //lists the derived word, so it can be displayed in the dictionary entry of the original word
                                        if(derivationListCountNoun[i] === "") {
                                                derivationListCountNoun[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i></strong>&nbsp"${meaning}"`
                                        } else {
                                                derivationListTransVerb[i] = derivationListTransVerb[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i></strong>&nbsp"${meaning}"`;
                                        };
                                }
                                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                        } else {
                                countNounArray.push(meaning);
                                countNounArrayPlural.push(plural);
                                activePassive.push(activePass);
                                animInan.push(animateInimate);
                                divineNonDivine.push(divineProfane);
                                humanAnimalInan.push(humanAnimal);
                                mascFemNeut.push(masculineFeminineNeuter);
                                mascFem.push(masculineFeminine);
                                naturalArtificial.push(naturalArt);
                                animacyClassifierArray.push(animacy);
                                shapeClassifierArray.push(shape);
                                shortGenericClassifierArray.push(shortGeneric);
                                derivationListCountNoun.push("");
                                if(derivedInModernOrOld === "old") {
                                        generatedCountNouns.push(olderDerivedTerm);
                                        derivedOrInheritedCountNoun.push("inheritedOldDerived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(addGrammaticalAffixes(olderDerivedTerm, "noun"))}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(addGrammaticalAffixes(generatedCountNouns[i], "noun"))}</i>&nbsp"${countNounArray[i]}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>)&nbsp+&nbsp<i>-${spell("X" + possessorAffix)}</i>&nbsp"possessor&nbspof"`;
                                        } else {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `Old&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(addGrammaticalAffixes(olderDerivedTerm, "noun"))}</i>&nbsp"${meaning}"&nbsp<&nbsp<i>${spell(possessorAffix + "A")}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun"))}</i>&nbsp"${countNounArray[i]}"&nbsp(cf&nbspModern&nbsp${capitaliseLanguageName(languageName)}&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>)`;
                                        };
                                } else {
                                        generatedCountNouns.push(derivedTerm) 
                                        derivedOrInheritedCountNoun.push("derived");
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange("X" + possessorAffix))}</i>&nbsp"possessor&nbspof"`;
                                        } else {
                                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix + "A"))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                                        };
                                        //lists the derived word, so it can be displayed in the dictionary entry of the original word
                                        if(derivationListCountNoun[i] === "") {
                                                derivationListCountNoun[i] = `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i></strong>&nbsp"${meaning}"`
                                        } else {
                                                derivationListCountNoun[i] = derivationListCountNoun[i] + `<br>&nbsp&nbsp&nbsp&nbsp-&nbsp<i><strong>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i></strong>&nbsp"${meaning}"`;
                                        };  
                                };
                                etymologyArrayCountNoun.push(countNounArray[i]);                       
                        };
                        if(exampleCounter < 6 && derivedInModernOrOld === "modern") {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                                ul.appendChild(exampleLi);
                                exampleCounter++;
                        };
                };
            };

            deriveCountNtoCountNPossessorOf("cave", "bear", "bears", "active", "anim", "profane", "animal", "masculine2", "masculine1", "natural", "wild-animal", "short-and-wide", "land-animal");
            deriveCountNtoCountNPossessorOf("club", "warrior", "warriors", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("priest", "temple", "temples", "passive", "inan", "divine", "secondinanimate", "neuter", "masculine1", "artificial", "inedible", "short-and-wide", "tool");
            deriveCountNtoCountNPossessorOf("sailor", "ship", "ships", "passive", "inan", "profane", "secondinanimate", "neuter", "masculine1", "artificial", "inedible", "short-and-wide", "tool");
            deriveCountNtoCountNPossessorOf("wound", "casulty", "casulties", "passive", "anim", "profane", "human", "neuter", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("womb", "fertile&nbspwoman", "fertile&nbspwomen", "active", "anim", "profane", "human", "feminine2", "feminine1", "natural", "woman", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("wife", "husband", "husbands", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("whale", "ocean", "oceans", "passive", "anim", "divine", "secondinanimate", "neuter", "masculine1", "natural", "inedible", "shapeless", "natural-inanimate");
            deriveCountNtoCountNPossessorOf("well", "village", "villages", "passive", "inan", "profane", "secondinanimate", "neuter", "feminine1", "artificial", "inedible", "shapeless", "tool");
            deriveCountNtoCountNPossessorOf("weapon", "armed&nbspman", "armed&nbspmen", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("way", "guide", "guides", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("wave", "tide", "tides", "active", "anim", "divine", "secondinanimate", "neuter", "feminine1", "natural", "inedible", "shapeless", "natural-inanimate");
            deriveCountNtoCountNPossessorOf("wagon", "carter", "carters", "active", "anim", "profane", "human", "masculine2", "masculine1", "artificial", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("village", "chieftan", "chieftans", "active", "anim", "divine", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("uncle", "nephew", "nephews", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("tribe", "chief", "chiefs", "active", "anim", "divine", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("tree", "forest", "forests", "passive", "anim", "divine", "secondinanimate", "masculine2", "feminine1", "natural", "tree", "shapeless", "natural-inanimate");
            deriveCountNtoCountNPossessorOf("spider", "cobweb", "cobwebs", "passive", "inan", "profane", "secondinanimate", "neuter", "feminine1", "natural", "inedible", "flat", "natural-inanimate");
            deriveCountNtoCountNPossessorOf("servant", "master", "masters", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("sheep", "shepherd", "shepherds", "active", "anim", "profane", "human", "masculine2", "masculine1", "natural", "man", "long-and-slender", "human2");
            deriveCountNtoCountNPossessorOf("yoke", "yoked&nbspanimal", "yoked&nbspanimals", "active", "anim", "profane", "animal", "masculine2", "masculine1", "natural", "labour", "long-and-slender", "land-animal");
        };
    };

    //mass noun to count noun
    for(let i = 0; i < massNounArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedMassNouns[i]) + soundChange(possessorAffix);
            } else {
                derivedTerm = soundChange(possessorAffix) + soundChange(generatedMassNouns[i]);
            };
            if(massNounArray[i] === "admiration") {
                let meaning = "admirer";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("admirers")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("short-and-wide");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "ash") {
                let meaning = "firepit";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("firepits")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("masculine1");
                        naturalArtificial.push("artificial");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("tool");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "bark") {
                let meaning = "trunk";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("trunks")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("tree");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "beer") {
                let meaning = "pint";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("pints")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("artificial");
                        animacyClassifierArray.push("edible");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("tool");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "blood") {
                let meaning = "vein";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("veins")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "bread") {
                let meaning = "bread-basket";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("bread-baskets")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("artificial");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("tool");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "captivity") {
                let meaning = "captor";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("captors")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "confusion") {
                let meaning = "idiot";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("idiots")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "deception") {
                let meaning = "liar";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("liars")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "hair") {
                let meaning = "scalp";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("scalps")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "honey") {
                let meaning = "beehive";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("beehives")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "hostility") {
                let meaning = "enemy";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("enemies")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "iron") {
                let meaning = "smith";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("smiths")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "marrow") {
                let meaning = "bone";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("bones")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "money") {
                let meaning = "wallet";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("wallets")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("artificial");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("short-and-wide");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "money") {
                let meaning = "wallet";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("wallets")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("artificial");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("short-and-wide");
                        shortGenericClassifierArray.push("tool");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "milk") {
                let meaning = "udder";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("udders")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "porridge") {
                let meaning = "stomach";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("stomachs")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "rain") {
                let meaning = "raincloud";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("raincloud")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("shapeless");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "vigour") {
                let meaning = "hero";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("heroes")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "wind") {
                let meaning = "sky";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("skies")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "sand") {
                let meaning = "beach";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("beaches")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "trickery") {
                let meaning = "trickster";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("trickster")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("masculine2");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "water") {
                let meaning = "river";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("rivers")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("anim");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("liquid");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "truth") {
                let meaning = "honest&nbspperson";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("honest&nbsppeople")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("divine");
                        humanAnimalInan.push("human");
                        mascFemNeut.push("neuter");
                        mascFem.push("masculine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("man");
                        shapeClassifierArray.push("long-and-slender");
                        shortGenericClassifierArray.push("human2");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(massNounArray[i] === "sight") {
                let meaning = "eye";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("eyes")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("active");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
        };
    };

    //count noun to mass noun
    for(let i = 0; i < countNounArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedCountNouns[i]) + soundChange(possessorAffix);
            } else {
                derivedTerm = soundChange(possessorAffix) + soundChange(generatedCountNouns[i]);
            };
            if(countNounArray[i] === "bag") {
                let meaning = randomIndexOfArray(["volume", "capacity"])
                if(massNounArray.includes(meaning)) {
                        generatedMassNouns[massNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedMassNoun[massNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayMassNoun[massNounArray.indexOf(meaning)] = countNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyMassNoun[massNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyMassNoun[massNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        massNounArray.push(meaning);
                        if(meaning === "volume") {
                                singulativeMassNounArray.push("fraction&nbspof&nbspvolume");
                                pluralSingulativeMassNounArray.push("fractions&nbspof&nbspvolume");
                        } else if(meaning === "capacity") {
                                singulativeMassNounArray.push("fraction&nbspof&nbspcapacity");
                                pluralSingulativeMassNounArray.push("fractions&nbspof&nbspcapacity");
                        }
                        generatedMassNouns.push(derivedTerm) 
                        derivedOrInheritedMassNoun.push("derived");
                        activePassiveMass.push("passive");
                        animInanMass.push("inan");
                        divineNonDivineMass.push("profane");
                        humanAnimalInanMass.push("secondinanimate");
                        mascFemNeutMass.push("neuter");
                        mascFemMass.push("feminine1");
                        naturalArtificialMass.push("natural");
                        animacyClassifierMassArray.push("inedible");
                        shapeClassifierMassArray.push("shapeless");
                        shortGenericClassifierMassArray.push("natural-inanimate");
                        etymologyArrayMassNoun.push(countNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyMassNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyMassNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            if(countNounArray[i] === "barrow") {
                let meaning = randomIndexOfArray(["undying&nbspfame", "eternal&nbspglory"])
                if(massNounArray.includes(meaning)) {
                        generatedMassNouns[massNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedMassNoun[massNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayMassNoun[massNounArray.indexOf(meaning)] = countNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyMassNoun[massNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`;
                        } else {
                                 etymologyMassNoun[massNounArray.indexOf(meaning)] = `<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        massNounArray.push(meaning);
                        if(meaning === "undying&nbspfame") {
                                singulativeMassNounArray.push("deed&nbspof&nbspundying&nbspfame");
                                pluralSingulativeMassNounArray.push("deeds&nbspof&nbspundying&nbspfame");
                        } else if(meaning === "eternal&nbsoglory") {
                                singulativeMassNounArray.push("deed&nbspof&nbspeternal&nbsoglory");
                                pluralSingulativeMassNounArray.push("deeds&nbspof&nbspeternal&nbsoglory");
                        }
                        generatedMassNouns.push(derivedTerm) 
                        derivedOrInheritedMassNoun.push("derived");
                        activePassiveMass.push("passive");
                        animInanMass.push("inan");
                        divineNonDivineMass.push("divine");
                        humanAnimalInanMass.push("secondinanimate");
                        mascFemNeutMass.push("neuter");
                        mascFemMass.push("masculine1");
                        naturalArtificialMass.push("natural");
                        animacyClassifierMassArray.push("inedible");
                        shapeClassifierMassArray.push("shapeless");
                        shortGenericClassifierMassArray.push("natural-inanimate");
                        etymologyArrayMassNoun.push(countNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyMassNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorAffix + "A"))}</i>&nbsp"possessor&nbspof"`)
                        } else {
                                etymologyMassNoun.push(`<i>${spell(soundChange(possessorAffix))}-</i>&nbsp"possessor&nbspof"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
            
        };
    };

    document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
};

function NADJtoADJpossessorOfQuality() {
    let li = document.createElement("li");
    let ul = document.createElement("ul");

    let derivedTerm = "";
    let suffixOrPrefix = "";
    if(Math.floor(Math.random() * 2) === 0) {
        suffixOrPrefix = "suffix";
    } else {
        suffixOrPrefix = "prefix";
    };
    let exampleCounter = 0;
    //count noun to adjective
    for(let i = 0; i < countNounArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedCountNouns[i]) + soundChange(possessorQualityAffix);
                li.innerHTML = `<i>-${spell(soundChange(possessorQualityAffix + "A"))}</i> "derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
            } else {
                derivedTerm = soundChange(possessorQualityAffix) + soundChange(generatedCountNouns[i]);
                li.innerHTML = `<i>${spell(soundChange("X" + possessorQualityAffix))}-</i> "derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
            };
            //assigns the English meaning of the newly derived term
            
            let meaning = "";
            //if the derived meaning is an array of possible meanings, it chooses only one word from the array
            if(typeof possessorOfQualityCount[i] === "string") {
                meaning = possessorOfQualityCount[i];
            } else if(typeof possessorOfQualityCount[i] === "object"){
                let array = cloneArray(possessorOfQualityCount[i])
                meaning = array[Math.floor(Math.random() * array.length)]
            } else if(possessorOfQualityCount[i] === undefined){
                continue;
            }

            //not all words can have this derivation, such words are marked with X
            if(meaning !== "X") {
                if(adjectiveArray.includes(meaning)) {
                        //replaces pre-existing word with new derivation
                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = countNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                    etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorQualityAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
                } else if(suffixOrPrefix === "prefix"){
                    etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + possessorQualityAffix))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`
                };
                } else {
                        adjectiveArray.push(meaning);
                        generatedAdjectives.push(derivedTerm) 
                        derivedOrInheritedADJ.push("derived");
                        etymologyArrayADJ.push(countNounArray[i]);  
                        if(suffixOrPrefix === "suffix") {
                    etymologyADJ.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorQualityAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`)
                } else if(suffixOrPrefix === "prefix"){
                    etymologyADJ.push(`<i>${spell(soundChange("X" + possessorQualityAffix))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`)
                };
                };
                if(exampleCounter < 6) {
                    let exampleLi = document.createElement("li");
                    exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(derivedTerm)}</i> "${meaning}"`;
                    ul.appendChild(exampleLi)
                };
                exampleCounter++; 
            };
        };
    };

    //mass noun to adjective
    for(let i = 0; i < massNounArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedMassNouns[i]) + soundChange(possessorQualityAffix);
                li.innerHTML = `<i>-${spell(soundChange("X" + possessorQualityAffix))}</i> "derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
            } else {
                derivedTerm = soundChange(possessorQualityAffix) + soundChange(generatedMassNouns[i]);
                li.innerHTML = `<i>${spell(soundChange(possessorQualityAffix + "A"))}-</i> "derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
            };
            //assigns the English meaning of the newly derived term
            let meaning = "";
            //if the derived meaning is an array of possible meanings, it chooses only one word from the array
            if(typeof possessorOfQualityMass[i] === "string") {
                meaning = possessorOfQualityMass[i];
            } else if(typeof possessorOfQualityMass[i] === "object"){
                let array = cloneArray(possessorOfQualityMass[i])
                meaning = array[Math.floor(Math.random() * array.length)]
            } else if(possessorOfQualityMass[i] === undefined){
                continue;
            }
             
            //not all words can have this derivation, such words are marked with X
            if(meaning !== "X") {
                if(adjectiveArray.includes(meaning)) {
                        //replaces pre-existing word with new derivation
                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                    etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorQualityAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`
                } else {
                    etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + possessorQualityAffix))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`
                };
                } else {
                        adjectiveArray.push(meaning);
                        generatedAdjectives.push(derivedTerm) 
                        derivedOrInheritedADJ.push("derived");
                        etymologyArrayADJ.push(massNounArray[i]);  
                        if(suffixOrPrefix === "suffix") {
                    etymologyADJ.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(possessorQualityAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"`)
                } else {
                    etymologyADJ.push(`<i>${spell(soundChange("X" + possessorQualityAffix))}-</i>&nbsp"derives&nbspadjectives&nbspfrom&nbspnouns&nbspdenoting&nbspthe&nbsppossession&nbspof&nbspa&nbspthing&nbspor&nbspquality"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`)
                };
                };
            };
        };
    };
    document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);   
};

function bodyParts() {
    let li = document.createElement("li");
    let ul = document.createElement("ul");

    let derivedTerm = "";
    let suffixOrPrefix = "";
    if(Math.floor(Math.random() * 2) === 0) {
        suffixOrPrefix = "suffix";
    } else {
        suffixOrPrefix = "prefix";
    };
    let exampleCounter = 0;
    //count noun to count noun
    for(let i = 0; i < countNounArray.length; i++) {
         if(Math.floor(Math.random() * 3) === 1) {
        //decides if the affix will be a suffix or prefix
        if(suffixOrPrefix === "suffix") {
        derivedTerm = soundChange(generatedCountNouns[i]) + soundChange(bodyPartAffix);
        li.innerHTML = `<i>-${spell(soundChange("X" + bodyPartAffix))}</i> "derives&nbspterms&nbspfor&nbspbody&nbspparts&nbspfrom&nbspnouns,&nbspadjectives&nbspand&nbspverbs"`
        } else {
        derivedTerm = soundChange(bodyPartAffix) + soundChange(generatedCountNouns[i]);
        li.innerHTML = `<i>${spell(soundChange(bodyPartAffix + "A"))}-</i> "derives&nbspterms&nbspfor&nbspbody&nbspparts&nbspfrom&nbspnouns,&nbspadjectives&nbspand&nbspverbs"`
        };

        if(countNounArray[i] === "club") {
        let meaning = "penis";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("penises")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        };
        if(countNounArray[i] === "coin") {
        let meaning = "nipple";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("nipples")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "corner") {
        let meaning = "elbow";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("elbows")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "crown") {
        let meaning = "forehead";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("foreheads")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("flat");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "cup") {
        let meaning = "lip";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("lips")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "dent") {
        let meaning = "bellybutton";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("bellybuttons")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "groove") {
        let meaning = "wrinkle";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("wrinkles")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "hammer") {
        let meaning = "fist";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("fists")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "hare"|| countNounArray[i] === "harp") {
                let meaning = "ear";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("ears")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("flat");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(countNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                        };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };
        if(countNounArray[i] === "kiss") {
        let meaning = "lip";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("lips")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "blade") {
        let meaning = "claw";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("claws")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("pointed");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "walk") {
        let meaning = "foot";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("feet")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "well") {
        let meaning = "throat";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("throats")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "wheel") {
        let meaning = "ankle";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("ankles")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "whip") {
        let meaning = "ponytail";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("ponytails")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(countNounArray[i] === "cherry") {
        let meaning = "testicle";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[countNounArray.indexOf(countNounArray[i])], "noun")))}</i>&nbsp"${countNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("testicles")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(countNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i>&nbsp"${countNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedCountNouns[countNounArray.indexOf(countNounArray[i])]))}</i>&nbsp"${countNounArray[i]}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        };
    };

    //mass noun to count noun
    for(let i = 0; i < massNounArray.length; i++) {
         if(Math.floor(Math.random() * 3) === 1) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedMassNouns[i]) + soundChange(bodyPartAffix);
            } else {
                derivedTerm = soundChange(bodyPartAffix) + soundChange(generatedMassNouns[i]);
            };
        };
            
        if(massNounArray[i] === "admiration") {
        let meaning = "heart";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("hearts")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "air") {
                let meaning = "lung";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("lungs")
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shapeClassifierArray.push("round");
                        shortGenericClassifierArray.push("natural-inanimate");
                        etymologyArrayCountNoun.push(massNounArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                        };
                };
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };
        if(massNounArray[i] === "glass") {
        let meaning = "eye";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("eyes")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "love") {
        let meaning = "heart";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("hearts")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "meat") {
        let meaning = "muscle";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("muscles")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "prose") {
        let meaning = "mind";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("minds")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "rain") {
        let meaning = "tear&nbspduct";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("tear&nbspducts")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "rope") {
        let potentialMeanings = ["penis", "artery"]
        let meaning = potentialMeanings[Math.floor(Math.random() * potentialMeanings.length)];
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("penises")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "string") {
        let meaning = "sinew";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("sinews")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "vigour") {
        let meaning = "liver";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("livers")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "water") {
        let meaning = "bladder";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = massNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("bladders")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        if(massNounArray[i] === "wind") {
        let meaning = "nostril";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = countNounArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[massNounArray.indexOf(massNounArray[i])], "noun")))}</i>&nbsp"${massNounArray[i]}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("nostrils")
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(massNounArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i>&nbsp"${massNounArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedMassNouns[massNounArray.indexOf(massNounArray[i])]))}</i>&nbsp"${massNounArray[i]}"`)
                };
        };

        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedMassNouns[i], "noun")))}</i> "${massNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };
        exampleCounter++; 
        };
    };
   
    //transitive verb to count noun
    for(let i = 0; i < transitiveVerbArray.length; i++) {
        //decides if word will have a derivation
        if(Math.floor(Math.random() * 3) === 1) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedTransitiveVerbs[i]) + soundChange(bodyPartAffix);
            } else {
                derivedTerm = soundChange(bodyPartAffix)+ soundChange(generatedTransitiveVerbs[i]);
            };

        if(transitiveVerbArray[i] === "hear") {
        let meaning = "ear";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("ears");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("flat");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "arrange"||transitiveVerbArray[i] === "do"||transitiveVerbArray[i] === "attain"||transitiveVerbArray[i] === "grasp"||transitiveVerbArray[i] === "grip"||transitiveVerbArray[i]=== "hold"||transitiveVerbArray[i] === "put"||transitiveVerbArray[i] === "rub") {
        let meaning = "hand";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("hands");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("flat");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "bearV" ||transitiveVerbArray[i] === "throw") {
        let potentialMeanings = ["arm", "shoulder"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "arm") {
                        countNounArrayPlural.push("arms");
                        shapeClassifierArray.push("long-and-slender");
                };
                if(meaning === "shoulder") {
                        countNounArrayPlural.push("shoulders")
                        shapeClassifierArray.push("round");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "bend") {
        let potentialMeanings = ["elbow", "knee", "joint"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "elbow") {
                        countNounArrayPlural.push("elbows");
                        shapeClassifierArray.push("round");
                };
                if(meaning === "shoulder") {
                        countNounArrayPlural.push("knee")
                        shapeClassifierArray.push("round");
                };
                if(meaning === "joint&nbsp(anatomical)") {
                        countNounArrayPlural.push("joint&nbsp(anatomical)")
                        shapeClassifierArray.push("round");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "bite"||transitiveVerbArray[i] === "chew") {
        let potentialMeanings = ["tooth", "jaw", "mouth"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "tooth") {
                        countNounArrayPlural.push("teeth");
                        shapeClassifierArray.push("pointed");
                };
                if(meaning === "jaw") {
                        countNounArrayPlural.push("jaws")
                        shapeClassifierArray.push("short-and-wide");
                };
                if(meaning === "mouth)") {
                        countNounArrayPlural.push("mouths")
                        shapeClassifierArray.push("round");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "blowV") {
        let potentialMeanings = ["mouth", "pursed&nbsplip", "lip"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "mouth") {
                        countNounArrayPlural.push("mouths");
                        shapeClassifierArray.push("round");
                };
                if(meaning === "pursed&nbsplip") {
                        countNounArrayPlural.push("pursed&nbsplips")
                        shapeClassifierArray.push("round");
                };
                if(meaning === "lip") {
                        countNounArrayPlural.push("lips")
                        shapeClassifierArray.push("long-and-slender");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "breathe ") {
        let meaning = "lung";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("lungs");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("flat");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "compel"||transitiveVerbArray[i] === "strikeV"||transitiveVerbArray[i] === "loveV") {
        let meaning = "heart";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("hearts");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "curse"||transitiveVerbArray[i] === "drink"||transitiveVerbArray[i] === "eat"||transitiveVerbArray[i] === "praise"||transitiveVerbArray[i] === "invoke"||transitiveVerbArray[i] === "persuade"||transitiveVerbArray[i] === "say") {
        let meaning = "mouth";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("mouths");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "deem"||transitiveVerbArray[i] === "learn"||transitiveVerbArray[i] === "know") {
        let potentialMeanings = ["mind", "brain", "thought"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "mind") {
                        countNounArrayPlural.push("minds");
                        shapeClassifierArray.push("shapeless");
                };
                if(meaning === "brain") {
                        countNounArrayPlural.push("brains")
                        shapeClassifierArray.push("round");
                };
                if(meaning === "thought)") {
                        countNounArrayPlural.push("thoughts")
                        shapeClassifierArray.push("shapeless");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "desire") {
        let potentialMeanings = ["heart", "genital", "penis", "vagina"];
        let meaning = randomIndexOfArray(potentialMeanings);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "heart") {
                        countNounArrayPlural.push("hearts");
                        shapeClassifierArray.push("round");
                };
                if(meaning === "genital") {
                        countNounArrayPlural.push("genitals")
                        shapeClassifierArray.push("round");
                };
                if(meaning === "penis") {
                        countNounArrayPlural.push("penises")
                        shapeClassifierArray.push("long-and-slender");
                };
                if(meaning === "vagina") {
                        countNounArrayPlural.push("vaginas")
                        shapeClassifierArray.push("round");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "strikeV") {
        let meaning = "fist";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("fists");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                };
        };
        
        if(exampleCounter < 6) {
                let exampleLi = document.createElement("li");
                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                ul.appendChild(exampleLi)
        };
        exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "feel") {
                let meaning = "finger";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("fingers");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("long-and-slender");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "gird") {
                let meaning = "waist";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("waists");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("round");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "hum") {
                let meaning = randomIndexOfArray(["voicebox", "vocal&nbspchord", "throat"])
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        if(meaning === "voicebox") {
                                countNounArrayPlural.push("voiceboxes");
                        } else if(meaning === "vocal&nbspchord") {
                                countNounArrayPlural.push("vocal&nbspchords");
                        } if(meaning === "throat") {
                                countNounArrayPlural.push("throats");
                        }
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("long-and-slender");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "lick") {
                let meaning = "tongue";
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("tongues");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("flat");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "insult") {
                let meaning = randomIndexOfArray(["mouth", "anus", "ass"]);
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        if(meaning === "mouth") {
                                countNounArrayPlural.push("mouths");
                        };
                        if(meaning === "anus") {
                                countNounArrayPlural.push("anuses");
                        }
                        if(meaning === "ass") {
                                countNounArrayPlural.push("asses");
                        };
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("flat");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "kick"|transitiveVerbArray[i] === "leap"|transitiveVerbArray[i] === "run") {
                let meaning = randomIndexOfArray(["foot", "leg"]);
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        if(meaning === "foot") {
                                countNounArrayPlural.push("feet");
                        };
                        if(meaning === "leg") {
                                countNounArrayPlural.push("legs");
                        };
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("long-and-slender");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "notice"|transitiveVerbArray[i] === "see"|transitiveVerbArray[i] === "read") {
                let meaning = "eye"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("eyes");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("round");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "ride") {
                let meaning = randomIndexOfArray(["ass", "thigh"]);
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        if(meaning === "ass") {
                            countNounArrayPlural.push("asses");
                        };
                        if(meaning === "thigh") {
                             countNounArrayPlural.push("thighs");       
                        }
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("round");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "rowV") {
                let meaning = "upper&nbspback"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("upper&nbspbacks");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("flat");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "scratch") {
                let meaning = "fingernail"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("fingernails");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("flat");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "sing"||transitiveVerbArray[i] === "swallow") {
                let meaning = "throat"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("throats");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("long-and-slender");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "smear") {
                let meaning = "palm"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("palms");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("flat");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "sprinkle") {
                let meaning = "fingertip"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("fingertips");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("round");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };

        if(transitiveVerbArray[i] === "suck") {
                let meaning = "nipple"
                if(countNounArray.includes(meaning)) {
                        generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                        derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                        etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = transitiveVerbArray[i];
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                        } else {
                        etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                        };
                } else {
                        countNounArray.push(meaning);
                        countNounArrayPlural.push("nipples");
                        generatedCountNouns.push(derivedTerm) 
                        derivedOrInheritedCountNoun.push("derived");
                        activePassive.push("passive");
                        animInan.push("inan");
                        divineNonDivine.push("profane");
                        humanAnimalInan.push("secondinanimate");
                        mascFemNeut.push("neuter");
                        mascFem.push("feminine1");
                        naturalArtificial.push("natural");
                        animacyClassifierArray.push("inedible");
                        shortGenericClassifierArray.push("natural-inanimate");
                        shapeClassifierArray.push("round");
                        etymologyArrayCountNoun.push(transitiveVerbArray[i]);
                        if(suffixOrPrefix === "suffix") {
                        etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                        } else {
                        etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`)
                        };
                };
                
                if(exampleCounter < 6) {
                        let exampleLi = document.createElement("li");
                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedCountNouns[i], "noun")))}</i> "${countNounArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "noun"))}</i> "${meaning}"`;
                        ul.appendChild(exampleLi)
                };
                exampleCounter++; 
        };



     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
    };

    //intransitive verb to count noun
    for(let i = 0; i < intransitiveVerbArray.length; i++) {
        //decides if word will have a derivation
        if(/*Math.floor(Math.random() * 3) === 1*/true) {
            //decides if the affix will be a suffix or prefix
            if(suffixOrPrefix === "suffix") {
                derivedTerm = soundChange(generatedIntransitiveVerbs[i]) + soundChange(bodyPartAffix);
            } else {
                derivedTerm = soundChange(bodyPartAffix) + soundChange(generatedIntransitiveVerbs[i]);
            };

        if(intransitiveVerbArray[i] === "aim") {
        let meaning = "index&nbspfinger";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("index&nbspfingers");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("long-and-slender");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
        };
        if(intransitiveVerbArray[i] === "babble"||intransitiveVerbArray[i] === "speak"||intransitiveVerbArray[i] === "stammer") {
        let meaning = randomIndexOfArray(["tongue", "mouth"]);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "tongue") {
                        countNounArrayPlural.push("tongues");
                };
                if(meaning === "mouth") {
                        countNounArrayPlural.push("mouths");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("flat");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "belch") {
        let meaning = "stomach";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("stomachs");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "bleat"||intransitiveVerbArray[i] === "cackle"||intransitiveVerbArray[i] === "howlV") {
        let meaning = "throat";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("throats");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("long-and-slender");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "crawl") {
        let meaning = "knee";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("knees");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "dream") {
        let meaning = randomIndexOfArray(["brain", "mind"]);
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "brain") {
                        countNounArrayPlural.push("brains");
                        shapeClassifierArray.push("round");
                };
                if(meaning === "mind") {
                        countNounArrayPlural.push("minds");
                        shapeClassifierArray.push("shapeless");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "fart"||intransitiveVerbArray[i] === "shit"||intransitiveVerbArray[i] === "sit") {
        let meaning = "ass";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("asses");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("round");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "flee"||intransitiveVerbArray[i] === "go"||intransitiveVerbArray[i] === "jump"||intransitiveVerbArray[i] === "move"||intransitiveVerbArray[i] === "stand"||intransitiveVerbArray[i] === "step") {
        let meaning = randomIndexOfArray(["foot", "leg"])
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                if(meaning === "foot") {
                    countNounArrayPlural.push("feet");
                };
                if(meaning === "leg") {
                    countNounArrayPlural.push("legs");
                };
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shapeClassifierArray.push("long-and-slender");
                shortGenericClassifierArray.push("natural-inanimate");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "fly") {
        let meaning = "wing";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("wings");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("flat");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "realise") {
        let meaning = "brain";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("brains");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "swell") {
        let meaning = "penis";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("penises");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "urinate") {
        let meaning = "bladder";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("bladders");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "wade") {
        let meaning = "thigh";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("thighs");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
        if(intransitiveVerbArray[i] === "yawn") {
        let meaning = "mouth";
        if(countNounArray.includes(meaning)) {
                generatedCountNouns[countNounArray.indexOf(meaning)] = derivedTerm;
                derivedOrInheritedCountNoun[countNounArray.indexOf(meaning)] = "derived";
                etymologyArrayCountNoun[countNounArray.indexOf(meaning)] = intransitiveVerbArray[i];
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`;
                } else {
                etymologyCountNoun[countNounArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb")))}-</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`;
                };
        } else {
                countNounArray.push(meaning);
                countNounArrayPlural.push("mouths");
                generatedCountNouns.push(derivedTerm) 
                derivedOrInheritedCountNoun.push("derived");
                activePassive.push("passive");
                animInan.push("inan");
                divineNonDivine.push("profane");
                humanAnimalInan.push("secondinanimate");
                mascFemNeut.push("neuter");
                mascFem.push("feminine1");
                naturalArtificial.push("natural");
                animacyClassifierArray.push("inedible");
                shortGenericClassifierArray.push("natural-inanimate");
                shapeClassifierArray.push("round");
                etymologyArrayCountNoun.push(intransitiveVerbArray[i]);
                if(suffixOrPrefix === "suffix") {
                etymologyCountNoun.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(bodyPartAffix + "A"))}</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"`)
                } else {
                etymologyCountNoun.push(`<i>${spell(soundChange(bodyPartAffix))}-</i>&nbsp"derives&nbspterms&nbspfor&nbspbody&nbspparts"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${removeVFromVerb(intransitiveVerbArray[i])}"`)
                };
        };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
        };
    };
    };
     document.getElementById("derivational-affixes").appendChild(li);
    li.appendChild(ul);
};

//derives causative verbs from adjectives
function ADJtoCausVerb() {
    let li = document.createElement("li");
    let ul = document.createElement("ul");

    let derivedTerm = "";
    let suffixOrPrefix = "";
    if(Math.floor(Math.random() * 2) === 0) {
        suffixOrPrefix = "suffix";
    } else {
        suffixOrPrefix = "prefix";
    };
    let exampleCounter = 0;

    for(let i = 0; i < adjectiveArray.length; i++) {
        if(Math.floor(Math.random() * 3) === 1) {
        //decides if the affix will be a suffix or prefix
                if(suffixOrPrefix === "suffix") {
                        derivedTerm = soundChange(generatedAdjectives[i]) + soundChange(adjToCausativeVerbAffix);
                        li.innerHTML = `<i>-${spell(soundChange("X" + adjToCausativeVerbAffix))}</i> "derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`
                } else {
                        derivedTerm = soundChange(adjToCausativeVerbAffix) + soundChange(generatedAdjectives[i]);
                        li.innerHTML = `<i>${spell(soundChange(adjToCausativeVerbAffix + "A"))}-</i> "derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`
                };

                if(adjectiveArray[i] === "able") {
                        let meaning = "enable";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("enables")
                                transitiveVerbPastArray.push("enabled")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "abundant"||adjectiveArray[i] === "numerous") {
                        let meaning = "multiply";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("multiplies")
                                transitiveVerbPastArray.push("multiplied")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "afraid"||adjectiveArray[i] === "scared") {
                        let meaning = "scare";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("scares")
                                transitiveVerbPastArray.push("scared")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "alive") {
                        let meaning = "invigorate";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("invigorates")
                                transitiveVerbPastArray.push("invigorated")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "alone"||adjectiveArray[i] === "lonely") {
                        let meaning = "isolate";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("isolates")
                                transitiveVerbPastArray.push("isolated")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "angry"||adjectiveArray[i] === "violent") {
                        let meaning = randomIndexOfArray(["anger", "enrage", "infuriate"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "anger") {
                                    transitiveVerb3SArray.push("angers")
                                    transitiveVerbPastArray.push("angered") 
                                }
                                if(meaning === "enrage") {
                                    transitiveVerb3SArray.push("enrages")
                                    transitiveVerbPastArray.push("enraged") 
                                }
                                if(meaning === "infuriate") {
                                    transitiveVerb3SArray.push("infuriates")
                                    transitiveVerbPastArray.push("infuriated") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "awake") {
                        let meaning = "wake&nbspup"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("wakes&nbspup")
                                transitiveVerbPastArray.push("woke&nbspup") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "bad") {
                        let meaning = "worsen";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("worsens")
                                transitiveVerbPastArray.push("worsened")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "bare"||adjectiveArray[i] === "bald"||adjectiveArray[i] === "naked") {
                        let meaning = randomIndexOfArray(["strip", "reveal", "show"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "strip") {
                                    transitiveVerb3SArray.push("strips")
                                    transitiveVerbPastArray.push("stripped") 
                                }
                                if(meaning === "reveal") {
                                    transitiveVerb3SArray.push("reveals")
                                    transitiveVerbPastArray.push("revealled") 
                                }
                                if(meaning === "show") {
                                    transitiveVerb3SArray.push("shows")
                                    transitiveVerbPastArray.push("showed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "bitter"||adjectiveArray[i] === "sour") {
                        let meaning = "enbitter"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[generatedAdjectives.indexOf(generatedAdjectives[i])]))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("enbitters")
                                transitiveVerbPastArray.push("enbittered") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "blind") {
                        let meaning = "blind";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("blinds")
                                transitiveVerbPastArray.push("blinded")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "brown") {
                        let meaning = randomIndexOfArray(["make&nbspbrown", "muddy", "corrupt"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspbrown") {
                                    transitiveVerb3SArray.push("makes&nbspbrown")
                                    transitiveVerbPastArray.push("made&nbspbrown") 
                                }
                                if(meaning === "muddy") {
                                    transitiveVerb3SArray.push("muddies")
                                    transitiveVerbPastArray.push("muddied") 
                                }
                                if(meaning === "corrupt") {
                                    transitiveVerb3SArray.push("corrupts")
                                    transitiveVerbPastArray.push("corrupted") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "cold") {
                        let meaning = "chill";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("chills")
                                transitiveVerbPastArray.push("chilled")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "correct") {
                        let meaning = "correct";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("corrects")
                                transitiveVerbPastArray.push("corrected")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "crooked") {
                        let meaning = "bend";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("bent")
                                transitiveVerbPastArray.push("bends")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "damp") {
                        let meaning = "dampen";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("dampens")
                                transitiveVerbPastArray.push("dampened")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "dark") {
                        let meaning = "darken";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("darkens")
                                transitiveVerbPastArray.push("darkened")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "deaf") {
                        let meaning = "deaf";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("deafens")
                                transitiveVerbPastArray.push("deafened")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "dear") {
                        let meaning = randomIndexOfArray(["cherish", "adore", "love", "endear"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "cherish") {
                                    transitiveVerb3SArray.push("cherishes")
                                    transitiveVerbPastArray.push("cherished") 
                                }
                                if(meaning === "adore") {
                                    transitiveVerb3SArray.push("adores")
                                    transitiveVerbPastArray.push("adored") 
                                }
                                if(meaning === "love") {
                                    transitiveVerb3SArray.push("loves")
                                    transitiveVerbPastArray.push("loved") 
                                }
                                if(meaning === "endear") {
                                    transitiveVerb3SArray.push("endears")
                                    transitiveVerbPastArray.push("endeared") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "deep") {
                        let meaning = randomIndexOfArray(["deepen", "expand"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "deepen") {
                                    transitiveVerb3SArray.push("deepens")
                                    transitiveVerbPastArray.push("deepend") 
                                }
                                if(meaning === "expand") {
                                    transitiveVerb3SArray.push("expands")
                                    transitiveVerbPastArray.push("expanded") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "difficult"||adjectiveArray[i] === "hard") {
                        let meaning = randomIndexOfArray(["encumber", "burden", "entangle", "make&nbspdifficult"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "encumber") {
                                    transitiveVerb3SArray.push("encumbers")
                                    transitiveVerbPastArray.push("encumbered") 
                                }
                                if(meaning === "burden") {
                                    transitiveVerb3SArray.push("burdens")
                                    transitiveVerbPastArray.push("burdened") 
                                }
                                if(meaning === "entangle") {
                                    transitiveVerb3SArray.push("entangles")
                                    transitiveVerbPastArray.push("entangled") 
                                }
                                if(meaning === "make&nbspdifficult") {
                                    transitiveVerb3SArray.push("makes&nbspdifficult")
                                    transitiveVerbPastArray.push("made&nbspdifficult") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "dry") {
                        let meaning = "dry"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("dries")
                                transitiveVerbPastArray.push("dried") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "dumb"||adjectiveArray[i] === "stupid") {
                        let meaning = randomIndexOfArray(["stupify", "stun", "silence"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "stupify") {
                                    transitiveVerb3SArray.push("stupifies")
                                    transitiveVerbPastArray.push("stupified") 
                                }
                                if(meaning === "stun") {
                                    transitiveVerb3SArray.push("stuns")
                                    transitiveVerbPastArray.push("stunned") 
                                }
                                if(meaning === "silence") {
                                    transitiveVerb3SArray.push("silences")
                                    transitiveVerbPastArray.push("silenced") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "empty"||adjectiveArray[i] === "hollow") {
                        let meaning = randomIndexOfArray(["empty", "hollow&nbspout"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "empty") {
                                    transitiveVerb3SArray.push("empties")
                                    transitiveVerbPastArray.push("emptied") 
                                }
                                if(meaning === "hollow&nbspout") {
                                    transitiveVerb3SArray.push("hollows&nbspout")
                                    transitiveVerbPastArray.push("hollowed&nbspout") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "evil"||adjectiveArray[i] === "cruel") {
                        let meaning = randomIndexOfArray(["villify", "corrupt"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "villify") {
                                    transitiveVerb3SArray.push("villifies")
                                    transitiveVerbPastArray.push("villified") 
                                }
                                if(meaning === "corrupt") {
                                    transitiveVerb3SArray.push("corrupts")
                                    transitiveVerbPastArray.push("corrupted") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "fast"||adjectiveArray[i] === "quick"||adjectiveArray[i] === "swift") {
                        let meaning = randomIndexOfArray(["speed&nbspup", "quicken", "accelarate"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "speed&nbspup") {
                                    transitiveVerb3SArray.push("speeds&nbspup")
                                    transitiveVerbPastArray.push("sped&nbspup") 
                                }
                                if(meaning === "quicken") {
                                    transitiveVerb3SArray.push("quickens")
                                    transitiveVerbPastArray.push("quickened") 
                                }
                                if(meaning === "accelarate") {
                                    transitiveVerb3SArray.push("accelarates")
                                    transitiveVerbPastArray.push("accelarated") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "fat") {
                        let meaning = "fatten";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("fattens")
                                transitiveVerbPastArray.push("fattened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "fertile"||adjectiveArray[i] === "pregnant") {
                        let meaning = randomIndexOfArray(["fertilise", "impregnate"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "fertilise") {
                                    transitiveVerb3SArray.push("fertilises")
                                    transitiveVerbPastArray.push("fertilised") 
                                }
                                if(meaning === "impregnate") {
                                    transitiveVerb3SArray.push("impregnates")
                                    transitiveVerbPastArray.push("impregnated") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "firm"||adjectiveArray[i] === "solid"||adjectiveArray[i] === "ensure") {
                        let meaning = randomIndexOfArray(["ensure", "solidify", "make&nbspsure", "confirm", "verify"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "ensure") {
                                    transitiveVerb3SArray.push("ensures")
                                    transitiveVerbPastArray.push("ensured") 
                                }
                                if(meaning === "solidify") {
                                    transitiveVerb3SArray.push("solidifies")
                                    transitiveVerbPastArray.push("solidified") 
                                }
                                if(meaning === "make&nbspsur") {
                                    transitiveVerb3SArray.push("makes&nbspsur")
                                    transitiveVerbPastArray.push("made&nbspsur") 
                                }
                                if(meaning === "confirm") {
                                    transitiveVerb3SArray.push("confirms")
                                    transitiveVerbPastArray.push("confirmed") 
                                }
                                if(meaning === "verify") {
                                    transitiveVerb3SArray.push("verifies")
                                    transitiveVerbPastArray.push("verified") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "flat") {
                        let meaning = randomIndexOfArray(["flatten", "squish", "apply&nbsppressure", "press"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "flatten") {
                                    transitiveVerb3SArray.push("flattens")
                                    transitiveVerbPastArray.push("flattened") 
                                }
                                if(meaning === "squish") {
                                    transitiveVerb3SArray.push("squishes")
                                    transitiveVerbPastArray.push("squished") 
                                }
                                if(meaning === "apply&nbsppressure") {
                                    transitiveVerb3SArray.push("applies&nbsppressure")
                                    transitiveVerbPastArray.push("applied&nbsppressure") 
                                }
                                if(meaning === "press") {
                                    transitiveVerb3SArray.push("presses")
                                    transitiveVerbPastArray.push("pressed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "foul"||adjectiveArray[i] === "nasty"||adjectiveArray[i] === "gross"||adjectiveArray[i] === "repugnant"||adjectiveArray[i] === "disgusting") {
                        let meaning = randomIndexOfArray(["corrupt", "contaminate", "pollute", "infect", "ruin", "shit&nbspon", "defile"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "corrupt") {
                                    transitiveVerb3SArray.push("corrupts")
                                    transitiveVerbPastArray.push("corrupted") 
                                }
                                if(meaning === "contaminate") {
                                    transitiveVerb3SArray.push("contaminates")
                                    transitiveVerbPastArray.push("contaminated") 
                                }
                                if(meaning === "pollute") {
                                    transitiveVerb3SArray.push("pollutes")
                                    transitiveVerbPastArray.push("polluted") 
                                }
                                if(meaning === "infect") {
                                    transitiveVerb3SArray.push("infects")
                                    transitiveVerbPastArray.push("infected") 
                                }
                                if(meaning === "ruin") {
                                    transitiveVerb3SArray.push("ruins")
                                    transitiveVerbPastArray.push("ruined") 
                                }
                                if(meaning === "shit&nbspon") {
                                    transitiveVerb3SArray.push("shits&nbspon")
                                    transitiveVerbPastArray.push("shat&nbspon") 
                                }
                                if(meaning === "defile") {
                                    transitiveVerb3SArray.push("defiles")
                                    transitiveVerbPastArray.push("defiled") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "fresh") {
                        let meaning = randomIndexOfArray(["refresh", "freshen", "renew"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "refresh") {
                                    transitiveVerb3SArray.push("refreshes")
                                    transitiveVerbPastArray.push("refreshed") 
                                }
                                if(meaning === "freshen") {
                                    transitiveVerb3SArray.push("freshens")
                                    transitiveVerbPastArray.push("freshened") 
                                }
                                if(meaning === "renew") {
                                    transitiveVerb3SArray.push("renews")
                                    transitiveVerbPastArray.push("renewed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "full") {
                        let meaning = "fill";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("fills")
                                transitiveVerbPastArray.push("filled") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "good") {
                        let meaning = "improve";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("improves")
                                transitiveVerbPastArray.push("improved") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "grey") {
                        let meaning = "make&nbspgrey";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("makes&nbspgrey")
                                transitiveVerbPastArray.push("made&nbspgrey") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "green") {
                        let meaning = "make&nbspgreen";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("makes&nbspgreen")
                                transitiveVerbPastArray.push("made&nbspgreen") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "half") {
                        let meaning = randomIndexOfArray(["cleave", "split&nbspin&nbsphalf", "divide&nbspinto&nbsptwo"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "cleave") {
                                        transitiveVerb3SArray.push("cleaves")
                                        transitiveVerbPastArray.push("cleaved") 
                                }
                                if(meaning === "split&nbspin&nbsphalf") {
                                        transitiveVerb3SArray.push("splits&nbspin&nbsphalf")
                                        transitiveVerbPastArray.push("split&nbspin&nbsphalf") 
                                }
                                if(meaning === "divide&nbspinto&nbsptwo") {
                                        transitiveVerb3SArray.push("divides&nbspinto&nbsptwo")
                                        transitiveVerbPastArray.push("divided&nbspinto&nbsptwo") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "happy") {
                        let meaning = randomIndexOfArray(["cheer&nbspup", "make&nbsphappy"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "cheer&nbspup") {
                                        transitiveVerb3SArray.push("cheers&nbspup")
                                        transitiveVerbPastArray.push("cheered&nbspup") 
                                }
                                if(meaning === "make&nbsphappy") {
                                        transitiveVerb3SArray.push("makes&nbsphappy")
                                        transitiveVerbPastArray.push("made&nbsphappy") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "heavy") {
                        let meaning = randomIndexOfArray(["bulk", "add&nbspweight&nbspto", "burden"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "bulk") {
                                        transitiveVerb3SArray.push("bulks")
                                        transitiveVerbPastArray.push("bulked") 
                                }
                                if(meaning === "add&nbspweight&nbspto") {
                                        transitiveVerb3SArray.push("adds&nbspweight&nbspto")
                                        transitiveVerbPastArray.push("added&nbspweight&nbspto") 
                                }
                                if(meaning === "burden") {
                                        transitiveVerb3SArray.push("burdens")
                                        transitiveVerbPastArray.push("burdened") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "high") {
                        let meaning = randomIndexOfArray(["raise", "lift"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "raise") {
                                        transitiveVerb3SArray.push("raises")
                                        transitiveVerbPastArray.push("raised") 
                                }
                                if(meaning === "lift") {
                                        transitiveVerb3SArray.push("lifts")
                                        transitiveVerbPastArray.push("lifted") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "holy") {
                        let meaning = "bless"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("blesses")
                                transitiveVerbPastArray.push("blessed") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "hostile") {
                        let meaning = randomIndexOfArray(["provoke", "anger"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "provoke") {
                                        transitiveVerb3SArray.push("provokes")
                                        transitiveVerbPastArray.push("provoked") 
                                }
                                if(meaning === "anger") {
                                        transitiveVerb3SArray.push("angers")
                                        transitiveVerbPastArray.push("angered") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "hot"||adjectiveArray[i] === "warm") {
                        let meaning = "heat"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("heats")
                                transitiveVerbPastArray.push("heateds") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "hungry") {
                        let meaning = "starve"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("starves")
                                transitiveVerbPastArray.push("starved") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "impure") {
                        let meaning = "pollute"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("pollutes")
                                transitiveVerbPastArray.push("polluted") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "intelligent") {
                        let meaning = "smarten"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("smartens")
                                transitiveVerbPastArray.push("smartened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "intense") {
                        let meaning = randomIndexOfArray(["intensify", "increase"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "intensify") {
                                        transitiveVerb3SArray.push("intensifies")
                                        transitiveVerbPastArray.push("intensified") 
                                }
                                if(meaning === "increase") {
                                        transitiveVerb3SArray.push("increases")
                                        transitiveVerbPastArray.push("increased") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "light&nbsp(of&nbspweight)") {
                        let meaning = randomIndexOfArray(["lighten", "ease"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "lighten") {
                                        transitiveVerb3SArray.push("lightens")
                                        transitiveVerbPastArray.push("lightened") 
                                }
                                if(meaning === "ease") {
                                        transitiveVerb3SArray.push("eases")
                                        transitiveVerbPastArray.push("eased") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "loose") {
                        let meaning = "loosen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("loosens")
                                transitiveVerbPastArray.push("loosened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "low") {
                        let meaning = "lower"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("lowers")
                                transitiveVerbPastArray.push("lowered") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "mild") {
                        let meaning = "ease"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("eases")
                                transitiveVerbPastArray.push("eased") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "moist") {
                        let meaning = "moisten"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("moistens")
                                transitiveVerbPastArray.push("moistened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "narrow") {
                        let meaning = randomIndexOfArray(["make&nbspnarrow", "make&nbspthin"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspnarrow") {
                                        transitiveVerb3SArray.push("makes&nbspnarrow")
                                        transitiveVerbPastArray.push("made&nbspnarrow") 
                                }
                                if(meaning === "make&nbspthin") {
                                        transitiveVerb3SArray.push("makes&nbspthin")
                                        transitiveVerbPastArray.push("made&nbspthin") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "near") {
                        let meaning = "place&nbspnearer"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("places&nbspnearer")
                                transitiveVerbPastArray.push("placed&nbspnearer") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "new") {
                        let meaning = randomIndexOfArray(["renew", "restore"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "renew") {
                                        transitiveVerb3SArray.push("renews")
                                        transitiveVerbPastArray.push("renewed") 
                                }
                                if(meaning === "restore") {
                                        transitiveVerb3SArray.push("restores")
                                        transitiveVerbPastArray.push("restored") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "noble") {
                        let meaning = "ennoble"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("ennobles")
                                transitiveVerbPastArray.push("ennobled") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "normal") {
                        let meaning = "normalise"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("normalises")
                                transitiveVerbPastArray.push("normalised") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "nourishing") {
                        let meaning = "nourish"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("nourishes")
                                transitiveVerbPastArray.push("nourished") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "obvious") {
                        let meaning = randomIndexOfArray(["make&nbspobvious", "show", "reveal"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspobvious") {
                                        transitiveVerb3SArray.push("makes&nbspobvious")
                                        transitiveVerbPastArray.push("made&nbspobvious") 
                                }
                                if(meaning === "show") {
                                        transitiveVerb3SArray.push("shows")
                                        transitiveVerbPastArray.push("showed") 
                                }
                                if(meaning === "reveal") {
                                        transitiveVerb3SArray.push("reveals")
                                        transitiveVerbPastArray.push("revealed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "old") {
                        let meaning = randomIndexOfArray(["age", "weather", "erode"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "age") {
                                        transitiveVerb3SArray.push("ages")
                                        transitiveVerbPastArray.push("aged") 
                                }
                                if(meaning === "weather") {
                                        transitiveVerb3SArray.push("weathers")
                                        transitiveVerbPastArray.push("weathered") 
                                }
                                if(meaning === "erode") {
                                        transitiveVerb3SArray.push("erodes")
                                        transitiveVerbPastArray.push("eroded") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "padded") {
                        let meaning = "stuff"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("stuffs")
                                transitiveVerbPastArray.push("stuffed") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "pale") {
                        let meaning = "bleach"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("bleaches")
                                transitiveVerbPastArray.push("bleached") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "polluted") {
                        let meaning = "pollute"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("pollutes")
                                transitiveVerbPastArray.push("polluted") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "powerful") {
                        let meaning = "empower"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("empowers")
                                transitiveVerbPastArray.push("empowered") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "pure") {
                        let meaning = randomIndexOfArray(["purify", "filter"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "purify") {
                                        transitiveVerb3SArray.push("purifies")
                                        transitiveVerbPastArray.push("purified") 
                                }
                                if(meaning === "filter") {
                                        transitiveVerb3SArray.push("filters")
                                        transitiveVerbPastArray.push("filtered") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "quiet") {
                        let meaning = randomIndexOfArray(["silence", "stiffle", "gag", "shut&nbspup"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "silence") {
                                        transitiveVerb3SArray.push("silences")
                                        transitiveVerbPastArray.push("silenced") 
                                }
                                if(meaning === "stiffle") {
                                        transitiveVerb3SArray.push("stiffles")
                                        transitiveVerbPastArray.push("stiffled") 
                                }
                                if(meaning === "gag") {
                                        transitiveVerb3SArray.push("gags")
                                        transitiveVerbPastArray.push("gagged") 
                                }
                                if(meaning === "shut&nbspup") {
                                        transitiveVerb3SArray.push("shuts&nbspup")
                                        transitiveVerbPastArray.push("shut&nbspup") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "ready") {
                        let meaning = "prepare"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("prepares")
                                transitiveVerbPastArray.push("prepared") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "rich") {
                        let meaning = randomIndexOfArray(["endow", "enrich"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "endow") {
                                        transitiveVerb3SArray.push("endows")
                                        transitiveVerbPastArray.push("endowed") 
                                }
                                if(meaning === "enrich") {
                                        transitiveVerb3SArray.push("enriches")
                                        transitiveVerbPastArray.push("enriched") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "right") {
                        let meaning = "correct"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("corrects")
                                transitiveVerbPastArray.push("corrected") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "rough") {
                        let meaning = "roughen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("roughens")
                                transitiveVerbPastArray.push("roughened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "sharp") {
                        let meaning = "sharpen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("sharpens")
                                transitiveVerbPastArray.push("sharpened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "slippery") {
                        let meaning = "make&nbspslippery"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("makes&nbspslippery")
                                transitiveVerbPastArray.push("made&nbspslippery") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "smooth") {
                        let meaning = "smoothens"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("smoothens")
                                transitiveVerbPastArray.push("smoothened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "soft") {
                        let meaning = "soften"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("softens")
                                transitiveVerbPastArray.push("softened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "speckled") {
                        let meaning = randomIndexOfArray(["sprinkle", "spray"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "sprinkle") {
                                        transitiveVerb3SArray.push("sprinkles")
                                        transitiveVerbPastArray.push("sprinkled") 
                                }
                                if(meaning === "spray") {
                                        transitiveVerb3SArray.push("sprays")
                                        transitiveVerbPastArray.push("sprayed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "stiff"||adjectiveArray[i] === "rigid") {
                        let meaning = "stiffen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("stiffens")
                                transitiveVerbPastArray.push("stiffened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "stinky"||adjectiveArray[i] === "smelly") {
                        let meaning = "make&nbspstinky"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("makes&nbspstinky")
                                transitiveVerbPastArray.push("made&nbspstinky") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "strong"||adjectiveArray[i] === "confident") {
                        let meaning = "strengthen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("strenghtens")
                                transitiveVerbPastArray.push("strengthened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "thick") {
                        let meaning = "thicken"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("thickens")
                                transitiveVerbPastArray.push("thickened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "tired") {
                        let meaning = randomIndexOfArray(["tire&nbspout", "exhaust"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "tire&nbspout") {
                                        transitiveVerb3SArray.push("tires&nbspout")
                                        transitiveVerbPastArray.push("tired&nbspout") 
                                }
                                if(meaning === "exhaust") {
                                        transitiveVerb3SArray.push("exhausts")
                                        transitiveVerbPastArray.push("exhausted") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "true") {
                        let meaning = randomIndexOfArray(["make&nbsptrue", "verify", "confirm"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbsptrue") {
                                        transitiveVerb3SArray.push("makes&nbsptrue")
                                        transitiveVerbPastArray.push("made&nbsptrue") 
                                }
                                if(meaning === "verify") {
                                        transitiveVerb3SArray.push("verifies")
                                        transitiveVerbPastArray.push("verified") 
                                }
                                if(meaning === "confirm") {
                                        transitiveVerb3SArray.push("confirms")
                                        transitiveVerbPastArray.push("confirmed") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "unhealthy"||adjectiveArray[i] === "sick") {
                        let meaning = randomIndexOfArray(["make&nbspunhealthy", "sicken"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspunhealthy") {
                                        transitiveVerb3SArray.push("makes&nbspunhealthy")
                                        transitiveVerbPastArray.push("made&nbspunhealthy") 
                                }
                                if(meaning === "sicken") {
                                        transitiveVerb3SArray.push("sickens")
                                        transitiveVerbPastArray.push("sickened") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "unusual"||adjectiveArray[i] === "weird"||adjectiveArray[i] === "other") {
                        let meaning = randomIndexOfArray(["make&nbspunsusual", "make&nbspodd", "differentiate", "estrange", "cast&nbspout", "exile", "distinguish"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspunsusual") {
                                        transitiveVerb3SArray.push("makes&nbspunsusual")
                                        transitiveVerbPastArray.push("made&nbspunsusual") 
                                }
                                if(meaning === "make&nbspodd") {
                                        transitiveVerb3SArray.push("makes&nbspodd")
                                        transitiveVerbPastArray.push("made&nbspodd") 
                                }
                                if(meaning === "differentiate") {
                                        transitiveVerb3SArray.push("differentiates")
                                        transitiveVerbPastArray.push("differentiated") 
                                }
                                if(meaning === "distinguish") {
                                        transitiveVerb3SArray.push("distinguishes")
                                        transitiveVerbPastArray.push("distinguished") 
                                }
                                if(meaning === "estrange") {
                                        transitiveVerb3SArray.push("estranges")
                                        transitiveVerbPastArray.push("estranged") 
                                }
                                if(meaning === "cast&nbspout") {
                                        transitiveVerb3SArray.push("casts&nbspout")
                                        transitiveVerbPastArray.push("cast&nbspout") 
                                }
                                if(meaning === "exile") {
                                        transitiveVerb3SArray.push("exiles")
                                        transitiveVerbPastArray.push("exiled") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "useful") {
                        let meaning = randomIndexOfArray(["utilise", "employ", "use"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "utilise") {
                                        transitiveVerb3SArray.push("utilises")
                                        transitiveVerbPastArray.push("utilised") 
                                }
                                if(meaning === "employ") {
                                        transitiveVerb3SArray.push("employs")
                                        transitiveVerbPastArray.push("employed") 
                                }
                                if(meaning === "use") {
                                        transitiveVerb3SArray.push("uses")
                                        transitiveVerbPastArray.push("used") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "visible") {
                        let meaning = randomIndexOfArray(["make&nbspvisible", "show", "reveal"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspvisible") {
                                        transitiveVerb3SArray.push("makes&nbspvisible")
                                        transitiveVerbPastArray.push("made&nbspvisible") 
                                }
                                if(meaning === "show") {
                                        transitiveVerb3SArray.push("shows")
                                        transitiveVerbPastArray.push("showed") 
                                }
                                if(meaning === "reveal") {
                                        transitiveVerb3SArray.push("reveals")
                                        transitiveVerbPastArray.push("revealled") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "weak") {
                        let meaning = "weaken";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("weakens")
                                transitiveVerbPastArray.push("weakened") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "wet") {
                        let meaning = "soak";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("soaks")
                                transitiveVerbPastArray.push("soaked") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "white") {
                        let meaning = randomIndexOfArray(["bleach", "whiten", "clean", "wash", "brighten"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "bleach") {
                                        transitiveVerb3SArray.push("bleaches")
                                        transitiveVerbPastArray.push("bleached") 
                                }
                                if(meaning === "whiten") {
                                        transitiveVerb3SArray.push("whitens")
                                        transitiveVerbPastArray.push("whitened") 
                                }
                                if(meaning === "clean") {
                                        transitiveVerb3SArray.push("cleans")
                                        transitiveVerbPastArray.push("cleaned") 
                                }
                                if(meaning === "wash") {
                                        transitiveVerb3SArray.push("washes")
                                        transitiveVerbPastArray.push("washed") 
                                }
                                if(meaning === "brighten") {
                                        transitiveVerb3SArray.push("brightens")
                                        transitiveVerbPastArray.push("brightened") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "wide"||adjectiveArray[i] === "broad") {
                        let meaning = randomIndexOfArray(["widen", "stretch", "broaden"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "widen") {
                                        transitiveVerb3SArray.push("widens")
                                        transitiveVerbPastArray.push("widened") 
                                }
                                if(meaning === "stretch") {
                                        transitiveVerb3SArray.push("stretches")
                                        transitiveVerbPastArray.push("stretched") 
                                }
                                if(meaning === "broaden") {
                                        transitiveVerb3SArray.push("broadens")
                                        transitiveVerbPastArray.push("broadened") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "wild") {
                        let meaning = randomIndexOfArray(["madden", "bewilder"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "madden") {
                                        transitiveVerb3SArray.push("maddens")
                                        transitiveVerbPastArray.push("maddened") 
                                }
                                if(meaning === "bewilder") {
                                        transitiveVerb3SArray.push("bewilders")
                                        transitiveVerbPastArray.push("bewildered") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "young") {
                        let meaning = randomIndexOfArray(["invigorate", "rejuvenate"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "invigorate") {
                                        transitiveVerb3SArray.push("invigorates")
                                        transitiveVerbPastArray.push("invigorated") 
                                }
                                if(meaning === "rejuvenate") {
                                        transitiveVerb3SArray.push("rejuvenates")
                                        transitiveVerbPastArray.push("rejuvenated") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "yellow") {
                        let meaning = "make&nbspyellow"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("makes&nbspyellow")
                                transitiveVerbPastArray.push("made&nbspyellow") 
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "short"||adjectiveArray[i] === "short") {
                        let meaning = randomIndexOfArray(["shorten", "reduce", "decrease", "shrink"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "shorten") {
                                        transitiveVerb3SArray.push("shortens")
                                        transitiveVerbPastArray.push("shortened") 
                                }
                                if(meaning === "reduce") {
                                        transitiveVerb3SArray.push("reduces")
                                        transitiveVerbPastArray.push("reduced") 
                                }
                                if(meaning === "decrease") {
                                        transitiveVerb3SArray.push("decreases")
                                        transitiveVerbPastArray.push("decreased") 
                                }
                                if(meaning === "shrink") {
                                        transitiveVerb3SArray.push("shrinks")
                                        transitiveVerbPastArray.push("shrunk") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "big") {
                        let meaning = randomIndexOfArray(["enlarge", "increase", "expand"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "enlarge") {
                                        transitiveVerb3SArray.push("enlarges")
                                        transitiveVerbPastArray.push("enlarged") 
                                }
                                if(meaning === "increase") {
                                        transitiveVerb3SArray.push("increases")
                                        transitiveVerbPastArray.push("increased") 
                                }
                                if(meaning === "expand") {
                                        transitiveVerb3SArray.push("expands")
                                        transitiveVerbPastArray.push("expanded") 
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "brave") {
                        let meaning = "encourage"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("encourages")
                                transitiveVerbPastArray.push("encouraged")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "confident"||adjectiveArray[i] === "powerful") {
                        let meaning = randomIndexOfArray(["support", "empower"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "support") {
                                        transitiveVerb3SArray.push("supports")
                                        transitiveVerbPastArray.push("supported")
                                }
                                if(meaning === "empower") {
                                        transitiveVerb3SArray.push("empowers")
                                        transitiveVerbPastArray.push("empowered")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "dead") {
                        let meaning = randomIndexOfArray(["kill", "murder", "slaughter", "slay"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "kill") {
                                        transitiveVerb3SArray.push("kills")
                                        transitiveVerbPastArray.push("killed")
                                }
                                if(meaning === "murder") {
                                        transitiveVerb3SArray.push("murders")
                                        transitiveVerbPastArray.push("murdered")
                                }
                                if(meaning === "slaughter") {
                                        transitiveVerb3SArray.push("slaughters")
                                        transitiveVerbPastArray.push("slaughtered")
                                }
                                if(meaning === "slay") {
                                        transitiveVerb3SArray.push("slays")
                                        transitiveVerbPastArray.push("slayed")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "free") {
                        let meaning = randomIndexOfArray(["free", "release"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "free") {
                                        transitiveVerb3SArray.push("frees")
                                        transitiveVerbPastArray.push("freed")
                                }
                                if(meaning === "release") {
                                        transitiveVerb3SArray.push("releases")
                                        transitiveVerbPastArray.push("released")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "funny") {
                        let meaning = randomIndexOfArray(["make&nbspfun&nbspof", "mock"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspfun&nbspof") {
                                        transitiveVerb3SArray.push("makes&nbspfun&nbspof")
                                        transitiveVerbPastArray.push("made&nbspfun&nbspof")
                                }
                                if(meaning === "mock") {
                                        transitiveVerb3SArray.push("mocks")
                                        transitiveVerbPastArray.push("mocked")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "healthy") {
                        let meaning = "heal";
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("heals")
                                transitiveVerbPastArray.push("healed")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "long") {
                        let meaning = randomIndexOfArray(["lengthen", "stretch"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "lengthen") {
                                        transitiveVerb3SArray.push("lengthens")
                                        transitiveVerbPastArray.push("lengthened")
                                }
                                if(meaning === "stretch") {
                                        transitiveVerb3SArray.push("stretches")
                                        transitiveVerbPastArray.push("stretched")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "slow") {
                        let meaning = randomIndexOfArray(["slow&nbspdown", "retard", "hamper", "delay"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "slow&nbspdown") {
                                        transitiveVerb3SArray.push("slows&nbspdown")
                                        transitiveVerbPastArray.push("slowed&nbspdown")
                                }
                                if(meaning === "retard") {
                                        transitiveVerb3SArray.push("retards")
                                        transitiveVerbPastArray.push("retarded")
                                }
                                if(meaning === "hamper") {
                                        transitiveVerb3SArray.push("hampers")
                                        transitiveVerbPastArray.push("hampered")
                                }
                                if(meaning === "delay") {
                                        transitiveVerb3SArray.push("delays")
                                        transitiveVerbPastArray.push("delayed")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "stark") {
                        let meaning = randomIndexOfArray(["distinguish", "clarify"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "distinguish") {
                                        transitiveVerb3SArray.push("distinguishes")
                                        transitiveVerbPastArray.push("distinguished")
                                }
                                if(meaning === "clarify") {
                                        transitiveVerb3SArray.push("clarifies")
                                        transitiveVerbPastArray.push("clarified")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "suitable") {
                        let meaning = randomIndexOfArray(["customise", "adjust"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "customise") {
                                        transitiveVerb3SArray.push("customises")
                                        transitiveVerbPastArray.push("customised")
                                }
                                if(meaning === "adjust") {
                                        transitiveVerb3SArray.push("adjusts")
                                        transitiveVerbPastArray.push("adjusted")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "tasty") {
                        let meaning = randomIndexOfArray(["season", "improve&nbsptaste"])
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "season") {
                                        transitiveVerb3SArray.push("seasons")
                                        transitiveVerbPastArray.push("seasoned")
                                }
                                if(meaning === "improve&nbsptaste") {
                                        transitiveVerb3SArray.push("improves&nbsptaste")
                                        transitiveVerbPastArray.push("improved&nbsptaste")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "tough") {
                        let meaning = "toughen"
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                transitiveVerb3SArray.push("toughens")
                                transitiveVerbPastArray.push("toughened")
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
                if(adjectiveArray[i] === "wonderful") {
                        let meaning = randomIndexOfArray(["make&nbspwonderful", "improve"]);
                        if(transitiveVerbArray.includes(meaning)) {
                                generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = adjectiveArray[i];
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`;
                                } else {
                                        etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])], "adjective"))}</i>&nbsp"${adjectiveArray[i]}"`;
                                };
                        } else {
                                transitiveVerbArray.push(meaning);
                                if(meaning === "make&nbspwonderful") {
                                        transitiveVerb3SArray.push("makes&nbspwonderful")
                                        transitiveVerbPastArray.push("made&nbspwonderful")
                                }
                                if(meaning === "improve") {
                                        transitiveVerb3SArray.push("improves")
                                        transitiveVerbPastArray.push("improved")
                                }
                                generatedTransitiveVerbs.push(derivedTerm) 
                                derivedOrInheritedTransVerb.push("derived");
                                etymologyArrayTransVerb.push(adjectiveArray[i]);
                                if(suffixOrPrefix === "suffix") {
                                        etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i>&nbsp"${adjectiveArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(adjToCausativeVerbAffix + "A"))}</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"`)
                                } else {
                                        etymologyTransVerb.push(`<i>${spell(soundChange("X" + adjToCausativeVerbAffix))}-</i>&nbsp"derives&nbspcausative&nbspverbs&nbspfrom&nbspadjectives"&nbsp+&nbsp<i>${spell(soundChange(generatedAdjectives[adjectiveArray.indexOf(adjectiveArray[i])]))}</i>&nbsp"${adjectiveArray[i]}"`)
                                };
                        };
                        if(exampleCounter < 6) {
                                let exampleLi = document.createElement("li");
                                exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedAdjectives[i], "adjective")))}</i> "${adjectiveArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "adjective"))}</i> "to ${meaning}"`;
                                ul.appendChild(exampleLi)
                        };
                        exampleCounter++; 
                };
        };
        document.getElementById("derivational-affixes").appendChild(li);
        li.appendChild(ul);
    };
}

//derives transitive verbs from intransitive verbs, with causative meanings or incausative transitive meanings
function intransToTransVerb() {
        let li = document.createElement("li");
        let ul = document.createElement("ul");
    
        let derivedTerm = "";
        let suffixOrPrefix = "";
        if(Math.floor(Math.random() * 2) === 0) {
            suffixOrPrefix = "suffix";
        } else {
            suffixOrPrefix = "prefix";
        };
        let exampleCounter = 0;

        for(let i = 0; i < intransitiveVerbArray.length; i++) {
                if(Math.floor(Math.random() * 3) === 1) {
                        if(suffixOrPrefix === "suffix") {
                                derivedTerm = soundChange(generatedIntransitiveVerbs[i]) + soundChange(intransToTransVerbAffix);
                                li.innerHTML = `<i>-${spell(soundChange("X" + intransToTransVerbAffix))}</i> "derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs. The resulting verb may be causative in nature, or just transitive in general, often translating to a phrasal verb in English."`
                        } else {
                                derivedTerm = soundChange(intransToTransVerbAffix) + soundChange(generatedIntransitiveVerbs[i]);
                                li.innerHTML = `<i>${spell(soundChange(intransToTransVerbAffix + "A"))}-</i> "derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs. The resulting verb may be causative in nature, or just transitive in general, often translating to a phrasal verb in English."`
                        };
                        if(intransitiveVerbArray[i] === "aim") {
                                let meaning = randomIndexOfArray(["aim&nbspat", "take&nbspaim"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "aim&nbspat") {
                                                transitiveVerb3SArray.push("aims&nbspat")
                                                transitiveVerbPastArray.push("aimed&nbspat")
                                        }
                                        if(meaning === "take&nbspaim") {
                                                transitiveVerb3SArray.push("takes&nbspaim")
                                                transitiveVerbPastArray.push("took&nbspaim")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "appear") {
                                let meaning = randomIndexOfArray(["show", "make&nbspan&nbspappearance", "turn&nbspup", "show&nbspup", "arrive&nbspat"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "show") {
                                                transitiveVerb3SArray.push("shows")
                                                transitiveVerbPastArray.push("showed")
                                        }
                                        if(meaning === "make&nbspan&nbspappearance") {
                                                transitiveVerb3SArray.push("makes&nbspan&nbspappearance")
                                                transitiveVerbPastArray.push("made&nbspan&nbspappearance")
                                        }
                                        if(meaning === "turn&nbspup") {
                                                transitiveVerb3SArray.push("turns&nbspup")
                                                transitiveVerbPastArray.push("turned&nbspup")
                                        }
                                        if(meaning === "show&nbspup") {
                                                transitiveVerb3SArray.push("shows&nbspup")
                                                transitiveVerbPastArray.push("showed&nbspup")
                                        }
                                        if(meaning === "arrive&nbspat") {
                                                transitiveVerb3SArray.push("arrives&nbspat")
                                                transitiveVerbPastArray.push("arrived&nbspat")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "cackle") {
                                let meaning = "cackle&nbspat"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("cackles&nbspat")
                                        transitiveVerbPastArray.push("cackled&nbspat")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "come") {
                                let meaning = "send&nbspfor"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("sends&nbspfor")
                                        transitiveVerbPastArray.push("sent&nbspfor")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "complain") {
                                let meaning = randomIndexOfArray(["complain&nbspto", "give&nbspgrievance"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "complain&nbspto") {
                                                transitiveVerb3SArray.push("complains&nbspto")
                                                transitiveVerbPastArray.push("complained&nbspto")
                                        }
                                        if(meaning === "give&nbspgrievance") {
                                                transitiveVerb3SArray.push("gives&nbspgrievance")
                                                transitiveVerbPastArray.push("gave&nbspgrievance")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "die"||intransitiveVerbArray[i] === "perish") {
                                let meaning = randomIndexOfArray(["kill", "slaughter", "murder", "slay"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "kill") {
                                                transitiveVerb3SArray.push("kills")
                                                transitiveVerbPastArray.push("killed")
                                        }
                                        if(meaning === "slaughter") {
                                                transitiveVerb3SArray.push("slaughters")
                                                transitiveVerbPastArray.push("slaughtered")
                                        }
                                        if(meaning === "murder") {
                                                transitiveVerb3SArray.push("murders")
                                                transitiveVerbPastArray.push("murdered")
                                        }
                                        if(meaning === "slay") {
                                                transitiveVerb3SArray.push("slays")
                                                transitiveVerbPastArray.push("slayed")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "dream") {
                                let meaning = "dream&nbspabout"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("dreams&nbspabout")
                                        transitiveVerbPastArray.push("dreamt&nbspabout")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "fail") {
                                let meaning = "sabotage";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("sabotages")
                                        transitiveVerbPastArray.push("sabotaged")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "fall") {
                                let meaning = randomIndexOfArray(["push&nbspover", "chop&nbspdown"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "push&nbspover") {
                                                transitiveVerb3SArray.push("pushes&nbspover")
                                                transitiveVerbPastArray.push("pushed&nbspover")
                                        }
                                        if(meaning === "chop&nbspdown") {
                                                transitiveVerb3SArray.push("chops&nbspdown")
                                                transitiveVerbPastArray.push("chopped&nbspdown")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "fart") {
                                let meaning = randomIndexOfArray(["fart&nbspon", "make&nbspfart"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "fart&nbspon") {
                                                transitiveVerb3SArray.push("farts&nbspon")
                                                transitiveVerbPastArray.push("farted&nbspon")
                                        }
                                        if(meaning === "make&nbspfart") {
                                                transitiveVerb3SArray.push("makes&nbspfart")
                                                transitiveVerbPastArray.push("made&nbspfart")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "ferment") {
                                let meaning = "ferment"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("ferments")
                                        transitiveVerbPastArray.push("fermented")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "flee") {
                                let meaning = randomIndexOfArray(["chase", "flee&nbspfrom"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "chase") {
                                                transitiveVerb3SArray.push("chases")
                                                transitiveVerbPastArray.push("chased")
                                        }
                                        if(meaning === "flee&nbspfrom") {
                                                transitiveVerb3SArray.push("flees&nbspfrom")
                                                transitiveVerbPastArray.push("fled&nbspfrom")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "float") {
                                let meaning = "float&nbspon";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("floats&nbspon")
                                        transitiveVerbPastArray.push("floated&nbspon")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "flow") {
                                let meaning = "pour";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("pours")
                                        transitiveVerbPastArray.push("poured")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "go") {
                                let meaning = "dismiss";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("dismisses")
                                        transitiveVerbPastArray.push("dismissed")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "grieve") {
                                let meaning = randomIndexOfArray(["grieve&nbspfor", "mourn&nbspfor"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "grieve&nbspfor") {
                                                transitiveVerb3SArray.push("grieves&nbspfor")
                                                transitiveVerbPastArray.push("grieved&nbspfor")
                                        };
                                        if(meaning === "mourn&nbspfor") {
                                                transitiveVerb3SArray.push("mourns&nbspfor")
                                                transitiveVerbPastArray.push("mourned&nbspfor")
                                        };
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "grow") {
                                let meaning = randomIndexOfArray(["grow", "raise", "nourish", "encourage"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "grow") {
                                                transitiveVerb3SArray.push("grows")
                                                transitiveVerbPastArray.push("grew")
                                        };
                                        if(meaning === "raise") {
                                                transitiveVerb3SArray.push("raises")
                                                transitiveVerbPastArray.push("raised")
                                        };
                                        if(meaning === "nourish") {
                                                transitiveVerb3SArray.push("nourishes")
                                                transitiveVerbPastArray.push("nourished")
                                        };
                                        if(meaning === "encourage") {
                                                transitiveVerb3SArray.push("encourages")
                                                transitiveVerbPastArray.push("encouraged")
                                        };
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "hang") {
                                let meaning = "hang&nbspup"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("hangs&nbspup")
                                        transitiveVerbPastArray.push("hung&nbspup")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "hiss") {
                                let meaning = "hiss&nbspat"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("hisses&nbspat")
                                        transitiveVerbPastArray.push("hissed&nbspat")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "howlV") {
                                let meaning = "howl&nbspat"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("howls&nbspat")
                                        transitiveVerbPastArray.push("howled&nbspat")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "hurry") {
                                let meaning = "rush"
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("rushes")
                                        transitiveVerbPastArray.push("rushed")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "lament") {
                                let meaning = randomIndexOfArray(["disturb", "harass", "trouble"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "disturb") {
                                                transitiveVerb3SArray.push("disturbs")
                                                transitiveVerbPastArray.push("disturbed")
                                        };
                                        if(meaning === "harass") {
                                                transitiveVerb3SArray.push("harasses")
                                                transitiveVerbPastArray.push("harassed")
                                        };
                                        if(meaning === "trouble") {
                                                transitiveVerb3SArray.push("troubles")
                                                transitiveVerbPastArray.push("troubled")
                                        };
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "nod") {
                                let meaning = "nod&nbspat";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("nods&nbspat")
                                        transitiveVerbPastArray.push("nodded&nbspat")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "play") {
                                let meaning = "play&nbspwith";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("plays&nbspwith")
                                        transitiveVerbPastArray.push("played&nbspwith")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "pray") {
                                let meaning = "pray&nbspfor";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("prays&nbspfor")
                                        transitiveVerbPastArray.push("prayed&nbspfor")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "realise"||intransitiveVerbArray[i] === "understand") {
                                let meaning = randomIndexOfArray(["teach", "demonstrate", "show"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "teach") {
                                                transitiveVerb3SArray.push("teaches")
                                                transitiveVerbPastArray.push("taught")
                                        }
                                        if(meaning === "demonstrate") {
                                                transitiveVerb3SArray.push("demonstrates")
                                                transitiveVerbPastArray.push("demonstrated")
                                        }
                                        if(meaning === "show") {
                                                transitiveVerb3SArray.push("shows")
                                                transitiveVerbPastArray.push("showed")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "rejoice") {
                                let meaning = "celebrate";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("celebrates")
                                        transitiveVerbPastArray.push("celebrated")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "shine") {
                                let meaning = randomIndexOfArray(["shine&nbspupon", "illuminate"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "shine&nbspupon") {
                                                transitiveVerb3SArray.push("shines&nbspupon")
                                                transitiveVerbPastArray.push("shone&nbspupon")
                                        }
                                        if(meaning === "illuminate") {
                                                transitiveVerb3SArray.push("illuminates")
                                                transitiveVerbPastArray.push("illuminated")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "shit") {
                                let meaning = "shit&nbspon";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("shits&nbspon")
                                        transitiveVerbPastArray.push("shat&nbspon")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "sit") {
                                let meaning = randomIndexOfArray(["sit&nbspon", "make&nbspsit&nbspdown"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "sit&nbspon") {
                                                transitiveVerb3SArray.push("sits&nbspon")
                                                transitiveVerbPastArray.push("sat&nbspon")
                                        }
                                        if(meaning === "make&nbspsit&nbspdown") {
                                                transitiveVerb3SArray.push("makes&nbspsit&nbspdown")
                                                transitiveVerbPastArray.push("made&nbspsit&nbspdown")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "sneak") {
                                let meaning = "sneak&nbspupon";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("sneaks&nbspupon")
                                        transitiveVerbPastArray.push("snuck&nbspupon")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "sleep") {
                                let meaning = randomIndexOfArray(["sleep&nbspon", "put&nbspto&nbspsleep", "tranquilize"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "sleep&nbspon") {
                                                transitiveVerb3SArray.push("sleeps&nbspon")
                                                transitiveVerbPastArray.push("slept&nbspon")
                                        }
                                        if(meaning === "put&nbspto&nbspsleep") {
                                                transitiveVerb3SArray.push("puts&nbspto&nbspsleep")
                                                transitiveVerbPastArray.push("put&nbspto&nbspsleep")
                                        }
                                        if(meaning === "tranquilize") {
                                                transitiveVerb3SArray.push("tranquilizes")
                                                transitiveVerbPastArray.push("tranquilized")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "stand") {
                                let meaning = "set&nbspupright";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("sets&nbspupright")
                                        transitiveVerbPastArray.push("set&nbspupright")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "stink") {
                                let meaning = randomIndexOfArray(["make&nbspstinky", "make&nbspsmelly"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "make&nbspstinky") {
                                                transitiveVerb3SArray.push("makes&nbspstinky")
                                                transitiveVerbPastArray.push("made&nbspstinky")
                                        }
                                        if(meaning === "make&nbspsmelly") {
                                                transitiveVerb3SArray.push("makes&nbspsmelly")
                                                transitiveVerbPastArray.push("made&nbspsmelly")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "suffer") {
                                let meaning = randomIndexOfArray(["suffer&nbspfor", "torment", "torture"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "suffer&nbspfor") {
                                                transitiveVerb3SArray.push("suffers&nbspfor")
                                                transitiveVerbPastArray.push("suffered&nbspfor")
                                        }
                                        if(meaning === "torment") {
                                                transitiveVerb3SArray.push("torments")
                                                transitiveVerbPastArray.push("tormented")
                                        }
                                        if(meaning === "torture") {
                                                transitiveVerb3SArray.push("tortures")
                                                transitiveVerbPastArray.push("tortured")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "swell") {
                                let meaning = randomIndexOfArray(["increase", "make&nbspswell"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "increase") {
                                                transitiveVerb3SArray.push("increases")
                                                transitiveVerbPastArray.push("increased")
                                        }
                                        if(meaning === "make&nbspswell") {
                                                transitiveVerb3SArray.push("makes&nbspswell")
                                                transitiveVerbPastArray.push("made&nbspswell")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "urinate") {
                                let meaning = "pee&nbspon";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("pees&nbspon")
                                        transitiveVerbPastArray.push("peed&nbspon")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "tremble") {
                                let meaning = "scare";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("scares")
                                        transitiveVerbPastArray.push("scared")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "weep") {
                                let meaning = randomIndexOfArray(["weep&nbspfor", "sadden", "distress"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "weep&nbspfor") {
                                                transitiveVerb3SArray.push("weeps&nbspfor")
                                                transitiveVerbPastArray.push("wept&nbspfor")
                                        }
                                        if(meaning === "sadden") {
                                                transitiveVerb3SArray.push("saddens")
                                                transitiveVerbPastArray.push("saddened")
                                        }
                                        if(meaning === "distress") {
                                                transitiveVerb3SArray.push("distresses")
                                                transitiveVerbPastArray.push("distressed")
                                        }
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "work") {
                                let meaning = "work&nbspat";
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        transitiveVerb3SArray.push("works&nbspat")
                                        transitiveVerbPastArray.push("worked&nbspat")
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(intransitiveVerbArray[i] === "yawn") {
                                let meaning = randomIndexOfArray(["yawn&nbspat", "be&nbspbored&nbspby"])
                                if(transitiveVerbArray.includes(meaning)) {
                                        generatedTransitiveVerbs[transitiveVerbArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedTransVerb[transitiveVerbArray.indexOf(meaning)] = "derived";
                                        etymologyArrayTransVerb[transitiveVerbArray.indexOf(meaning)] = intransitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`;
                                        } else {
                                                etymologyTransVerb[transitiveVerbArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(addGrammaticalAffixes(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])], "verb"))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`;
                                        };
                                } else {
                                        transitiveVerbArray.push(meaning);
                                        if(meaning === "yawn&nbspat") {
                                                transitiveVerb3SArray.push("yawns&nbspat")
                                                transitiveVerbPastArray.push("yawned&nbspat")
                                        };
                                        if(meaning === "be&nbspbored&nbspby") {
                                                transitiveVerb3SArray.push("is&nbspbored&nbspby")
                                                transitiveVerbPastArray.push("was&nbspbored&nbspbyt")
                                        };
                                        generatedTransitiveVerbs.push(derivedTerm) 
                                        derivedOrInheritedTransVerb.push("derived");
                                        etymologyArrayTransVerb.push(intransitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyTransVerb.push(`<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"&nbsp+&nbsp<i>-${spell(soundChange(intransToTransVerbAffix + "A"))}</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"`)
                                        } else {
                                                etymologyTransVerb.push(`<i>${spell(soundChange("X" + intransToTransVerbAffix))}-</i>&nbsp"derives&nbsptransitive&nbspverbs&nbspfrom&nbspintransitive&nbspverbs"&nbsp+&nbsp<i>${spell(soundChange(generatedIntransitiveVerbs[intransitiveVerbArray.indexOf(intransitiveVerbArray[i])]))}</i>&nbsp"to&nbsp${intransitiveVerbArray[i]}"`)
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedIntransitiveVerbs[i], "verb")))}</i> "to ${intransitiveVerbArray[i]}" > <i>${spell(addGrammaticalAffixes(derivedTerm))}</i> "to ${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                };
                document.getElementById("derivational-affixes").appendChild(li);
                li.appendChild(ul);
        };
};

//derives adjective meaning "-able" from transitive verbs
function transVerbToABleAdjective() {
        let li = document.createElement("li");
        let ul = document.createElement("ul");
    
        let derivedTerm = "";
        let suffixOrPrefix = "";
        if(Math.floor(Math.random() * 2) === 0) {
            suffixOrPrefix = "suffix";
        } else {
            suffixOrPrefix = "prefix";
        };
        let exampleCounter = 0;

        for(let i = 0; i < transitiveVerbArray.length; i++) {
                if(Math.floor(Math.random() * 3) === 1) {
                        if(suffixOrPrefix === "suffix") {
                                derivedTerm = soundChange(generatedTransitiveVerbs[i]) + soundChange(transVerbToABleAdjectiveAffix);
                                li.innerHTML = `<i>-${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}</i> "derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`
                        } else {
                                derivedTerm = soundChange(transVerbToABleAdjectiveAffix) + soundChange(generatedTransitiveVerbs[i]);
                                li.innerHTML = `<i>${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}-</i> "derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`
                        };
                        if(transitiveVerbArray[i] === "accept") {
                                let meaning = "acceptable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspacceptable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "arrange") {
                                let meaning = "arrangable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsparrangable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "attain") {
                                let meaning = "attainable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspattainable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "bearV") {
                                let meaning = "bearable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbearable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "beat") {
                                let meaning = "beatable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbeatable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "bend") {
                                let meaning = randomIndexOfArray(["bendable", "flexible"]);
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "bendable") {
                                                comparativeAdjectiveArray.push("more&nbspbendable");
                                        }
                                        if(meaning === "flexible") {
                                                comparativeAdjectiveArray.push("more&nbspflexible");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "bind") {
                                let meaning = "bindable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbindable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "braid") {
                                let meaning = "braidable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbraidable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "breathe") {
                                let meaning = "breatheable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbreatheable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "build") {
                                let meaning = "buildable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspbuildable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "burn") {
                                let meaning = "flammable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspflammable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "buy"||transitiveVerbArray[i] === "pay") {
                                let meaning = "for&nbspsale"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("X");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "carve") {
                                let meaning = "carvable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspcarvable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "chew") {
                                let meaning = "chewable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspchewable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "collect") {
                                let meaning = "collectable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspcollectable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "cook") {
                                let meaning = "cookable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspcookable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "cost") {
                                let meaning = "expensive"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspexpensive");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "craft"||transitiveVerbArray[i] === "make") {
                                let meaning = randomIndexOfArray(["craftable", "possible", "potential"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "craftable") {
                                                comparativeAdjectiveArray.push("more&nbspcraftable");
                                        }
                                        if(meaning === "possible") {
                                                comparativeAdjectiveArray.push("more&nbsppossible");
                                        }
                                        if(meaning === "potential") {
                                                comparativeAdjectiveArray.push("more&nbsppotential");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "cure") {
                                let meaning = "curable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspcurable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "cut") {
                                let meaning = "cutable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspcutable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "decieve"||transitiveVerbArray[i] === "lie"||transitiveVerbArray[i] === "trick") {
                                let meaning = randomIndexOfArray(["gullible", "naive", "susceptable", "prone"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "gullible") {
                                                comparativeAdjectiveArray.push("more&nbspgullible");
                                        }
                                        if(meaning === "naive") {
                                                comparativeAdjectiveArray.push("more&nbspnaive");
                                        }
                                        if(meaning === "susceptable") {
                                                comparativeAdjectiveArray.push("more&nbspsusceptable");
                                        }
                                        if(meaning === "prone") {
                                                comparativeAdjectiveArray.push("more&nbspprone");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "defeat") {
                                let meaning = "defeatable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdefeatable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "desire"||transitiveVerbArray[i] === "want") {
                                let meaning = "desirable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdesirable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "divide"||transitiveVerbArray[i] === "separate") {
                                let meaning = randomIndexOfArray(["separable", "divisbable"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "separable") {
                                                comparativeAdjectiveArray.push("more&nbspseparable");
                                        }
                                        if(meaning === "divisbable") {
                                                comparativeAdjectiveArray.push("more&nbspdivisbable");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "drink") {
                                let meaning = "drinkable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdrinkable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "drive") {
                                let meaning = "driveable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdriveable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "do") {
                                let meaning = randomIndexOfArray(["doable", "achievable", "possible"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "doable") {
                                                comparativeAdjectiveArray.push("more&nbspdoable");
                                        }
                                        if(meaning === "achievable") {
                                                comparativeAdjectiveArray.push("more&nbspachievable");
                                        }
                                        if(meaning === "possible") {
                                                comparativeAdjectiveArray.push("more&nbsppossible");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "dye") {
                                let meaning = "dyeable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdyeable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "employ") {
                                let meaning = "employable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspemployable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "enjoy") {
                                let meaning = "enjoyable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspenjoyable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "eat") {
                                let meaning = "edible";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspedible");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "extinguish") {
                                let meaning = "extinguishable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspextinguishable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "feel"||transitiveVerbArray[i] === "feel") {
                                let meaning = randomIndexOfArray(["material", "real", "corporeal", "present", "touchable"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "material") {
                                                comparativeAdjectiveArray.push("more&nbspmaterial");
                                        }
                                        if(meaning === "real") {
                                                comparativeAdjectiveArray.push("realer");
                                        }
                                        if(meaning === "corporeal") {
                                                comparativeAdjectiveArray.push("more&nbspcorporeal");
                                        }
                                        if(meaning === "present") {
                                                comparativeAdjectiveArray.push("more&nbsppresent");
                                        }
                                        if(meaning === "touchable") {
                                                comparativeAdjectiveArray.push("more&nbsptouchable");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "forget") {
                                let meaning = "forgettable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspforgettable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "follow") {
                                let meaning = randomIndexOfArray(["traceable", "trackable"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "traceable") {
                                                comparativeAdjectiveArray.push("more&nbsptraceable");
                                        }
                                        if(meaning === "trackable") {
                                                comparativeAdjectiveArray.push("more&nbsptrackable");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "grip"||transitiveVerbArray[i] === "grasp"||transitiveVerbArray[i] === "hold") {
                                let meaning = randomIndexOfArray(["graspable", "ergonomic", "possible", "potential", "tangible", "real"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "graspable") {
                                                comparativeAdjectiveArray.push("more&nbspgraspable");
                                        }
                                        if(meaning === "ergonomic") {
                                                comparativeAdjectiveArray.push("more&nbspergonomic");
                                        }
                                        if(meaning === "possible") {
                                                comparativeAdjectiveArray.push("more&nbsppossible");
                                        }
                                        if(meaning === "potential") {
                                                comparativeAdjectiveArray.push("more&nbsppotential");
                                        }
                                        if(meaning === "tangible") {
                                                comparativeAdjectiveArray.push("more&nbsptangible");
                                        }
                                        if(meaning === "real") {
                                                comparativeAdjectiveArray.push("realer");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "harm") {
                                let meaning = "vulnerable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspvulnerable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "hate"||transitiveVerbArray[i] === "despise") {
                                let meaning = "despicable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspdespicable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "hear") {
                                let meaning = "audible";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspaudible");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "hide") {
                                let meaning = "inconspicuous";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspinconspicuous");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "honourV") {
                                let meaning = "honourable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsphonourable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "instruct") {
                                let meaning = "instructible";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspinstructible");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "invoke") {
                                let meaning = "invokable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspinvokable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "know") {
                                let meaning = "knowable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspknowable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "leap") {
                                let meaning = randomIndexOfArray(["vaultable", "surmountable"]);
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "vaultable") {
                                                comparativeAdjectiveArray.push("more&nbspvaultable");
                                        };
                                        if(meaning === "surmountable") {
                                                comparativeAdjectiveArray.push("more&nbspsurmountable");
                                        };
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "like") {
                                let meaning = "likable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsplikable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "loveV") {
                                let meaning = "lovable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsplovable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "marry") {
                                let meaning = randomIndexOfArray(["unwed", "single"]);
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("X");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "notice") {
                                let meaning = "noticable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspnoticable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "paint") {
                                let meaning = "paintable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsppaintable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "praise") {
                                let meaning = "laudable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsplaudable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "perceive") {
                                let meaning = "perceivable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspperceivable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "pierce") {
                                let meaning = "piercable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsppiercable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "prefer") {
                                let meaning = "preferable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsppreferable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "protect") {
                                let meaning = randomIndexOfArray(["defensible", "protectable"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "defensible") {
                                                comparativeAdjectiveArray.push("more&nbspdefensible");
                                        }
                                        if(meaning === "protectable") {
                                                comparativeAdjectiveArray.push("more&nbspprotectable");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "read") {
                                let meaning = randomIndexOfArray(["legible", "readable"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "legible") {
                                                comparativeAdjectiveArray.push("more&nbsplegible");
                                        }
                                        if(meaning === "readable") {
                                                comparativeAdjectiveArray.push("more&nbspreadable");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "remember") {
                                let meaning = "memorable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspmemorable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "respect") {
                                let meaning = "respectable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbsprespectable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "ride") {
                                let meaning = "mountable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspmountable");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "say") {
                                let meaning = randomIndexOfArray(["known", "rumoured", "possible"]);
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "known") {
                                                comparativeAdjectiveArray.push("more&nbspknown");
                                        }
                                        if(meaning === "rumoured") {
                                                comparativeAdjectiveArray.push("more&nbsprumouredn");
                                        }
                                        if(meaning === "possible") {
                                                comparativeAdjectiveArray.push("more&nbsppossible");
                                        }
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "see") {
                                let meaning = "visible";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspvisible");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "smear") {
                                let meaning = "viscous";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspviscous");
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "steal") {
                                let meaning = randomIndexOfArray(["easy&nbspto&nbspsteal", "unprotected"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "easy&nbspto&nbspsteal") {
                                                comparativeAdjectiveArray.push("more&nbspeasy&nbspto&nbspsteal")
                                        };
                                        if(meaning === "unprotected") {
                                                comparativeAdjectiveArray.push("more&nbspunprotected")
                                        };
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "suit") {
                                let meaning = "suitable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspsuitable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "surpass") {
                                let meaning = "surpassible"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspsurpassible")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "teach") {
                                let meaning = "teachable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspteachable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "throw") {
                                let meaning = "throwable"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspthrowable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "trust") {
                                let meaning = randomIndexOfArray(["trustable", "trustworthy", "honest"])
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        if(meaning === "trustable") {
                                                comparativeAdjectiveArray.push("more&nbsptrustable")
                                        };
                                        if(meaning === "trustworthy") {
                                                comparativeAdjectiveArray.push("more&nbsptrustworthy")
                                        };
                                        if(meaning === "honest") {
                                                comparativeAdjectiveArray.push("more&nbsphonest")
                                        };
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "use") {
                                let meaning = "usable";
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspusable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "write") {
                                let meaning = randomIndexOfArray(["writable", "can&nbspbe&nbspwritten&nbspon, describable"]);
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspusable")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                        if(transitiveVerbArray[i] === "stab"||transitiveVerbArray[i] === "kill"||transitiveVerbArray[i] === "murder"||transitiveVerbArray[i] === "slaughter") {
                                let meaning = "mortal"
                                if(adjectiveArray.includes(meaning)) {
                                        generatedAdjectives[adjectiveArray.indexOf(meaning)] = derivedTerm;
                                        derivedOrInheritedADJ[adjectiveArray.indexOf(meaning)] = "derived";
                                        etymologyArrayADJ[adjectiveArray.indexOf(meaning)] = transitiveVerbArray[i];
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                } else {
                                        adjectiveArray.push(meaning);
                                        comparativeAdjectiveArray.push("more&nbspmortal")
                                        generatedAdjectives.push(derivedTerm) 
                                        derivedOrInheritedADJ.push("derived");
                                        etymologyArrayADJ.push(transitiveVerbArray[i]);
                                        if(suffixOrPrefix === "suffix") {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"&nbsp+&nbsp<i>-${spell(soundChange(transVerbToABleAdjectiveAffix + "A"))}</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"`;
                                        } else {
                                                etymologyADJ[adjectiveArray.indexOf(meaning)] = `<i>${spell(soundChange("X" + transVerbToABleAdjectiveAffix))}-</i>&nbsp"derives&nbspadjectives&nbspof&nbspability&nbspfrom&nbsptransitive&nbspverbs,&nbsp-able"&nbsp+&nbsp<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[transitiveVerbArray.indexOf(transitiveVerbArray[i])], "verb")))}</i>&nbsp"to&nbsp${removeVFromVerb(transitiveVerbArray[i])}"`;
                                        };
                                };
                                if(exampleCounter < 6) {
                                        let exampleLi = document.createElement("li");
                                        exampleLi.innerHTML = `<i>${spell(soundChange(addGrammaticalAffixes(generatedTransitiveVerbs[i], "verb")))}</i> "to&nbsp${removeVFromVerb(transitiveVerbArray[i])}" > <i>${spell(addGrammaticalAffixes(derivedTerm, "verb"))}</i> "${meaning}"`;
                                        ul.appendChild(exampleLi)
                                };
                                exampleCounter++; 
                        };
                };
                document.getElementById("derivational-affixes").appendChild(li);
                li.appendChild(ul);
        };
};

function makeVocabStats() {
        let nounNum = countNounArray.length + massNounArray.length;
        let verbNum = transitiveVerbArray.length + intransitiveVerbArray.length;
        let adjNum = adjectiveArray.length;
        let advNum = adverbArray.length;
        let conjNum = conjunctionArray.length;
        let adpoNum = adpositionArray.length;
        let intensNum = intensifierArray.length;
        let quantifierNum = smallQuantifiersArray.length + middingQuantifierArray.length +  bigQuantifierArray.length +  opinionQuantifierArray.length;
        let allQuantifierArray = smallQuantifiersArray.concat(middingQuantifierArray, bigQuantifierArray, opinionQuantifierArray);
        let wordsNum = nounNum + verbNum + adjNum + conjNum + adpoNum + intensNum + advNum + quantifierNum;

        //counts all nouns
        let nounAmount = document.getElementById("amount-of-nouns");
        let nounPercent = Math.round(nounNum/wordsNum * 100);
        nounAmount.innerHTML = `${nounPercent}% (${nounNum})`;

        //counts all verbs
        let verbAmount = document.getElementById("amount-of-verbs");
        let verbPercent = Math.round(verbNum/wordsNum * 100);
        verbAmount.innerHTML = `${verbPercent}% (${verbNum})`;

        //counts all adjectives
        let adjectiveAmount = document.getElementById("amount-of-adj");
        let adjPercent = Math.round(adjNum/wordsNum * 100);
        adjectiveAmount.innerHTML = `${adjPercent}% (${adjNum})`;

        //counts all conjunctions
        let conjAmount = document.getElementById("amount-of-conj");
        let conjPercent = Math.round(conjNum/wordsNum * 100);
        conjAmount.innerHTML = `${conjPercent}% (${conjNum})`;

        //counts all adpositions
        let adpoAmount = document.getElementById("amount-of-adpo");
        let adpoPercent = Math.round(adpoNum/wordsNum * 100);
        adpoAmount.innerHTML = `${adpoPercent}% (${adpoNum})`;

        //counts all adverbs
        let advAmount = document.getElementById("amount-of-adverbs");
        let advPercent = Math.round(advNum/wordsNum * 100);
        advAmount.innerHTML = `${advPercent}% (${advNum})`;

        //counts all intensiiers
        let intensAmount = document.getElementById("amount-of-intens");
        let intensPercent = Math.round(intensNum/wordsNum * 100);
        intensAmount.innerHTML = `${intensPercent}% (${intensNum})`;

        //counts all quanitifers
        let quantifierAmount = document.getElementById("amount-of-quantifiers");
        let quantifierPercent = Math.round(quantifierNum/wordsNum * 100);
        quantifierAmount.innerHTML = `${quantifierPercent}% (${quantifierNum})`;

        //counts all count nouns
        let countNounAmount = document.getElementById("amount-of-count-nouns");;
        let countNounNum = countNounArray.length;
        let countNounPercent = Math.round(countNounNum/nounNum * 100);
        countNounAmount.innerHTML = `${countNounPercent}% (${countNounNum})`;

        //counts all mass nouns
        let massNounAmount = document.getElementById("amount-of-mass-nouns");;
        let massNounNum = massNounArray.length;
        let massNounPercent = Math.round(massNounNum/nounNum * 100);
        massNounAmount.innerHTML = `${massNounPercent}% (${massNounNum})`;

        //counts all transitive nouns
        let transVerbAmount = document.getElementById("amount-of-trans-verbs");;
        let transVerbNum = transitiveVerbArray.length;
        let transVerbPercent = Math.round(transVerbNum/verbNum * 100);
        transVerbAmount.innerHTML = `${transVerbPercent}% (${transVerbNum})`;

        //counts all intransitive nouns
        let intransVerbAmount = document.getElementById("amount-of-intrans-verbs");;
        let intransVerbNum = intransitiveVerbArray.length;
        let intransVerbPercent = Math.round(intransVerbNum/verbNum * 100);
        intransVerbAmount.innerHTML = `${intransVerbPercent}% (${intransVerbNum})`;

        //counts which words were inherited vs derived
        let inheritedWord = document.getElementById("inherited-vocab");
        let derivedWord = document.getElementById("derived-vocab");
        let inheritednounNum = 0;
        let derivednounNum = 0;
        for(let i = 0; i < countNounArray.length; i++) {
                if(derivedOrInheritedCountNoun[i] === "inherited"||derivedOrInheritedCountNoun[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedCountNoun[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < massNounArray.length; i++) {
                if(derivedOrInheritedMassNoun[i] === "inherited"||derivedOrInheritedMassNoun[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedMassNoun[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < adjectiveArray.length; i++) {
                if(derivedOrInheritedADJ[i] === "inherited"||derivedOrInheritedADJ[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedADJ[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < transitiveVerbArray.length; i++) {
                if(derivedOrInheritedTransVerb[i] === "inherited"||derivedOrInheritedTransVerb[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedTransVerb[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < intransitiveVerbArray.length; i++) {
                if(derivedOrInheritedIntransVerb[i] === "inherited"||derivedOrInheritedIntransVerb[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedIntransVerb[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < conjunctionArray.length; i++) {
                if(derivedOrInheritedCONJ[i] === "inherited"||derivedOrInheritedCONJ[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedCONJ[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < adverbArray.length; i++) {
                if(derivedOrInheritedADV[i] === "inherited"||derivedOrInheritedADV[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedADV[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < intensifierArray.length; i++) {
                if(derivedOrInheritedINTENS[i] === "inherited"||derivedOrInheritedINTENS[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedINTENS[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < allQuantifierArray.length; i++) {
                if(derivedOrInheritedQuantifier[i] === "inherited"||derivedOrInheritedQuantifier[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedQuantifier[i] === "derived") {
                        derivednounNum++;
                };
        };
        for(let i = 0; i < adpositionArray.length; i++) {
                if(derivedOrInheritedADPO[i] === "inherited"||derivedOrInheritedADPO[i] === "inheritedOldDerived") {
                        inheritednounNum++;
                } else if(derivedOrInheritedADPO[i] === "derived") {
                        derivednounNum++;
                };
        };
        inheritedWord.innerHTML = `${Math.round(inheritednounNum/wordsNum*100)}% (${inheritednounNum})`;
        derivedWord.innerHTML = `${Math.round(derivednounNum/wordsNum*100)}% (${derivednounNum})`;

        //counts which nouns were inherited vs derived
        let inheritedNoun = document.getElementById("inherited-vocab-noun");
        let derivedNoun = document.getElementById("derived-vocab-noun");
        let inheritedNounNum = 0;
        let derivedNounNum = 0;
        for(let i = 0; i < countNounArray.length; i++) {
                if(derivedOrInheritedCountNoun[i] === "inherited"||derivedOrInheritedCountNoun[i] === "inheritedOldDerived") {
                        inheritedNounNum++;
                } else if(derivedOrInheritedCountNoun[i] === "derived") {
                        derivedNounNum++;
                };
        };
        for(let i = 0; i < massNounArray.length; i++) {
                if(derivedOrInheritedMassNoun[i] === "inherited"||derivedOrInheritedMassNoun[i] === "inheritedOldDerived") {
                        inheritedNounNum++;
                } else if(derivedOrInheritedMassNoun[i] === "derived") {
                        derivedNounNum++;
                };
        };
        inheritedNoun.innerHTML = `${Math.round(inheritedNounNum/nounNum*100)}% (${inheritedNounNum})`;
        derivedNoun.innerHTML = `${Math.round(derivedNounNum/nounNum*100)}% (${derivedNounNum})`;

        //counts which verbs were inherited vs derived
        let inheritedVerb = document.getElementById("inherited-vocab-verb");
        let derivedVerb = document.getElementById("derived-vocab-verb");
        let inheritedVerbNum = 0;
        let derivedVerbNum = 0;
        for(let i = 0; i < transitiveVerbArray.length; i++) {
                if(derivedOrInheritedTransVerb[i] === "inherited"||derivedOrInheritedTransVerb[i] === "inheritedOldDerived") {
                        inheritedVerbNum++;
                } else if(derivedOrInheritedTransVerb[i] === "derived") {
                        derivedVerbNum++;
                };
        };
        for(let i = 0; i < intransitiveVerbArray.length; i++) {
                if(derivedOrInheritedIntransVerb[i] === "inherited"||derivedOrInheritedIntransVerb[i] === "inheritedOldDerived") {
                        inheritedVerbNum++;
                } else if(derivedOrInheritedIntransVerb[i] === "derived") {
                        derivedVerbNum++;
                };
        };
        inheritedVerb.innerHTML = `${Math.round(inheritedVerbNum/verbNum*100)}% (${inheritedVerbNum})`;
        derivedVerb.innerHTML = `${Math.round(derivedVerbNum/verbNum*100)}% (${derivedVerbNum})`;

        //counts which adjectives were inherited vs derived
        let inheritedAdj = document.getElementById("inherited-vocab-adjectives");
        let derivedAdj = document.getElementById("derived-vocab-adjectives");
        let inheritedAdjNum = 0;
        let derivedAdjNum = 0;
        for(let i = 0; i < adjectiveArray.length; i++) {
                if(derivedOrInheritedADJ[i] === "inherited"||derivedOrInheritedADJ[i] === "inheritedOldDerived") {
                        inheritedAdjNum++;
                } else if(derivedOrInheritedADJ[i] === "derived") {
                        derivedAdjNum++;
                };
        };
        inheritedAdj.innerHTML = `${Math.round(inheritedAdjNum/adjNum*100)}% (${inheritedAdjNum})`;
        derivedAdj.innerHTML = `${Math.round(derivedAdjNum/adjNum*100)}% (${derivedAdjNum})`;

        //counts which adverbs were inherited vs derived
        let inheritedAdv = document.getElementById("inherited-vocab-adverbs");
        let derivedAdv = document.getElementById("derived-vocab-adverbs");
        let inheritedAdvNum = 0;
        let derivedAdvNum = 0;
        for(let i = 0; i < adverbArray.length; i++) {
                if(derivedOrInheritedADV[i] === "inherited"||derivedOrInheritedADV[i] === "inheritedOldDerived") {
                        inheritedAdvNum++;
                } else if(derivedOrInheritedADV[i] === "derived") {
                        derivedAdvNum++;
                };
        };
        inheritedAdv.innerHTML = `${Math.round(inheritedAdvNum/advNum*100)}% (${inheritedAdvNum})`;
        derivedAdv.innerHTML = `${Math.round(derivedAdvNum/advNum*100)}% (${derivedAdvNum})`;

        //counts which conjunctions were inherited vs derived
        let inheritedConj = document.getElementById("inherited-vocab-conj");
        let derivedConj = document.getElementById("derived-vocab-conj");
        let inheritedConjNum = 0;
        let derivedConjNum = 0;
        for(let i = 0; i < conjunctionArray.length; i++) {
                if(derivedOrInheritedCONJ[i] === "inherited"||derivedOrInheritedCONJ[i] === "inheritedOldDerived") {
                        inheritedConjNum++;
                } else if(derivedOrInheritedCONJ[i] === "derived") {
                        derivedConjNum++;
                };
        };
        inheritedConj.innerHTML = `${Math.round(inheritedConjNum/conjNum*100)}% (${inheritedConjNum})`;
        derivedConj.innerHTML = `${Math.round(derivedConjNum/conjNum*100)}% (${derivedConjNum})`;

        //counts which adpositions were inherited vs derived
        let inheritedADPO = document.getElementById("inherited-vocab-adpo");
        let derivedADPO = document.getElementById("derived-vocab-adpo");
        let inheritedADPONum = 0;
        let derivedADPONum = 0;
        for(let i = 0; i < adpositionArray.length; i++) {
                if(derivedOrInheritedADPO[i] === "inherited"||derivedOrInheritedADPO[i] === "inheritedOldDerived") {
                        inheritedADPONum++;
                } else if(derivedOrInheritedADPO[i] === "derived") {
                        derivedADPONum++;
                };
        };
        inheritedADPO.innerHTML = `${Math.round(inheritedADPONum/adpoNum*100)}% (${inheritedADPONum})`;
        derivedADPO.innerHTML = `${Math.round(derivedADPONum/adpoNum*100)}% (${derivedADPONum})`;

        //counts which intensifiers were inherited vs derived
        let inheritedINTENS = document.getElementById("inherited-vocab-intens");
        let derivedINTENS = document.getElementById("derived-vocab-intens");
        let inheritedINTENSNum = 0;
        let derivedINTENSNum = 0;
        for(let i = 0; i < intensifierArray.length; i++) {
                if(derivedOrInheritedADPO[i] === "inherited"||derivedOrInheritedADPO[i] === "inheritedOldDerived") {
                        inheritedINTENSNum++;
                } else if(derivedOrInheritedADPO[i] === "derived") {
                        derivedINTENSNum++;
                };
        };
        inheritedINTENS.innerHTML = `${Math.round(inheritedINTENSNum/intensNum*100)}% (${inheritedINTENSNum})`;
        derivedINTENS.innerHTML = `${Math.round(derivedINTENSNum/intensNum*100)}% (${derivedINTENSNum})`;

        //counts which quantifiers were inherited vs derived
        let inheritedQUANT = document.getElementById("inherited-vocab-quant");
        let derivedQUANT = document.getElementById("derived-vocab-quant");
        let inheritedQUANTNum = 0;
        let derivedQUANTNum = 0;
        for(let i = 0; i < allQuantifierArray.length; i++) {
                if(derivedOrInheritedQuantifier[i] === "inherited"||derivedOrInheritedQuantifier[i] === "inheritedOldDerived") {
                        inheritedQUANTNum++;
                } else if(derivedOrInheritedQuantifier[i] === "derived") {
                        derivedQUANTNum++;
                };
        };
        inheritedQUANT.innerHTML = `${Math.round(inheritedQUANTNum/quantifierNum*100)}% (${inheritedQUANTNum})`;
        derivedQUANT.innerHTML = `${Math.round(derivedQUANTNum/quantifierNum*100)}% (${derivedQUANTNum})`;
};

let generateLanguageButton = document.getElementById("generate-language");
generateLanguageButton.addEventListener("click", generateLanguage);

function generateLanguage() {
    clear();
    createAffixes();
    selectDerivationalAffixes();
    makeVocabStats();
    //console.log(derivationListTransVerb)
};



export {countNounArray, massNounArray, transitiveVerbArray, intransitiveVerbArray, adjectiveArray, conjunctionArray, adverbArray, adpositionArray, intensifierArray, countNounArrayPlural, generatedCountNouns, generatedMassNouns, generatedAdjectives, generatedTransitiveVerbs, generatedIntransitiveVerbs, generatedAdverbs, generatedConjunctions, generatedAdpositions, generatedIntensifiers, etymologyArrayADJ, derivedOrInheritedADJ, etymologyADJ, etymologyCountNoun, derivedOrInheritedCountNoun, activePassive, animInan, divineNonDivine, humanAnimalInan, mascFemNeut, mascFem, naturalArtificial, animacyClassifierArray, shapeClassifierArray, shortGenericClassifierArray, etymologyArrayCountNoun, pluralSingulativeMassNounArray, singulativeMassNounArray, etymologyMassNoun, etymologyArrayMassNoun, comparativeAdjectiveArray, derivedOrInheritedTransVerb, etymologyArrayTransVerb, etymologyTransVerb,derivedOrInheritedMassNoun, derivationListTransVerb, derivationListIntransVerb, derivedOrInheritedIntransVerb, etymologyArrayIntransVerb, etymologyIntransVerb, derivationListCountNoun
}